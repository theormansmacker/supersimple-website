<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Eco-Quest</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked@4.0.0/marked.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap');
        
        body {
            font-family: 'Nunito', sans-serif;
            transition: background-color 0.3s, color 0.3s;
        }
        
        .dark {
            color-scheme: dark;
        }
        
        :root {
            --primary-color: #5D5CDE;
            --secondary-color: #4CAF50;
            --danger-color: #F44336;
            --warning-color: #FFC107;
            --cylinder-wildlife: #4CAF50;
            --cylinder-industrial: #F44336;
            --cylinder-transportation: #2196F3;
        }
        
        .dark {
            --bg-color: #181818;
            --text-color: #ffffff;
        }
        
        .btn-category {
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .btn-category:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.2);
        }
        
        .btn-category:active {
            transform: translateY(-1px);
        }
        
        #cylinderContainer {
            height: 200px;
        }
        
        .npc {
            transition: transform 0.3s;
        }
        
        .npc:hover {
            transform: scale(1.1);
        }

        .mini-game-container {
            min-height: 400px;
        }

        .progress-bar {
            transition: width 0.5s ease-in-out;
        }
        
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        
        .bounce {
            animation: bounce 1s infinite;
        }
        
        .fade-in {
            animation: fadeIn 0.5s forwards;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .slide-in {
            animation: slideIn 0.5s forwards;
        }
        
        @keyframes slideIn {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .shop-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }

        .shop-item {
            transition: transform 0.3s, box-shadow 0.3s;
        }
        
        .animal {
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        .animal:hover {
            transform: scale(1.2);
        }
        
        .animal.selected {
            box-shadow: 0 0 0 3px #5D5CDE;
            border-radius: 50%;
        }
        
        /* Loading screen styles */
        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.9);
            z-index: 9999;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            transition: opacity 0.5s ease;
        }
        
        .dark .loading-screen {
            background-color: rgba(24, 24, 36, 0.9);
        }
        
        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: #5D5CDE;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        /* Login screen styles */
        .login-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #f8fafc;
            z-index: 9998;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        
        .dark .login-screen {
            background-color: #1e293b;
        }
        
        /* Path styles for Bike Path Builder */
        .path-segment {
            height: 6px !important;
            background-color: #4F46E5 !important;
            box-shadow: 0 0 8px rgba(79, 70, 229, 0.6);
            z-index: 10;
        }
        
        /* Fix for emission points in Factory Audit */
        .emission-point {
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
            z-index: 20;
        }
        
        /* User profile dropdown */
        .user-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            width: 250px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
            padding: 1rem;
            z-index: 50;
            display: none;
        }
        
        .dark .user-dropdown {
            background: #374151;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.5);
        }
        
        .user-profile:hover .user-dropdown {
            display: block;
        }
        
        /* Notification system */
        .notification-container {
            position: fixed;
            top: 1rem;
            right: 1rem;
            display: flex;
            flex-direction: column;
            gap: 4px;
            z-index: 9999;
            pointer-events: none;
        }
        
        .notification {
            background-color: white;
            color: #333;
            border-radius: 0.5rem;
            padding: 0.75rem 1rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            max-width: 300px;
            pointer-events: all;
            transition: transform 0.3s ease, opacity 0.3s ease;
            margin-bottom: 0;
        }
        
        .notification.success {
            border-left: 4px solid #10B981;
        }
        
        .notification.error {
            border-left: 4px solid #EF4444;
        }
        
        .notification.info {
            border-left: 4px solid #3B82F6;
        }
        
        .notification.achievement {
            border-left: 4px solid #8B5CF6;
        }
        
        .dark .notification {
            background-color: #1F2937;
            color: #F9FAFB;
        }

        /* Chat system */
        .chat-container {
            position: fixed;
            bottom: 0;
            right: 0;
            width: 350px;
            background-color: white;
            border-radius: 8px 0 0 0;
            box-shadow: 0 -4px 10px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            transition: transform 0.3s ease, height 0.3s ease;
            display: flex;
            flex-direction: column;
            max-height: 500px;
            transform: translateY(calc(100% - 40px));
        }
        
        .chat-container.open {
            transform: translateY(0);
        }
        
        .dark .chat-container {
            background-color: #1F2937;
            box-shadow: 0 -4px 10px rgba(0, 0, 0, 0.3);
        }
        
        .chat-header {
            padding: 10px 15px;
            background-color: #5D5CDE;
            color: white;
            border-radius: 8px 0 0 0;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .chat-tabs {
            display: flex;
            background-color: #f3f4f6;
            border-bottom: 1px solid #e5e7eb;
        }
        
        .dark .chat-tabs {
            background-color: #374151;
            border-bottom: 1px solid #4b5563;
        }
        
        .chat-tab {
            padding: 8px 12px;
            cursor: pointer;
            text-align: center;
            flex: 1;
            color: #6b7280;
            font-size: 0.875rem;
            position: relative;
        }
        
        .dark .chat-tab {
            color: #9ca3af;
        }
        
        .chat-tab.active {
            color: #5D5CDE;
            border-bottom: 2px solid #5D5CDE;
            font-weight: 600;
        }
        
        .dark .chat-tab.active {
            color: #a78bfa;
            border-bottom: 2px solid #a78bfa;
        }
        
        .chat-messages {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            max-height: 320px;
        }
        
        .message {
            margin-bottom: 10px;
            display: flex;
            flex-direction: column;
        }
        
        .message-header {
            display: flex;
            font-size: 0.75rem;
            margin-bottom: 2px;
            align-items: center;
        }
        
        .message-sender {
            font-weight: 600;
            margin-right: 5px;
        }
        
        .message-time {
            color: #9ca3af;
        }
        
        .dark .message-time {
            color: #6b7280;
        }
        
        .message-content {
            background-color: #f3f4f6;
            padding: 8px 12px;
            border-radius: 10px;
            max-width: 90%;
            align-self: flex-start;
            font-size: 0.875rem;
            word-break: break-word;
        }
        
        .dark .message-content {
            background-color: #374151;
        }
        
        .message.self .message-content {
            background-color: #5D5CDE;
            color: white;
            align-self: flex-end;
        }
        
        .dark .message.self .message-content {
            background-color: #6366f1;
        }
        
        .message.ai .message-content {
            background-color: #10b981;
            color: white;
        }
        
        .dark .message.ai .message-content {
            background-color: #059669;
        }
        
        .chat-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #e5e7eb;
        }
        
        .dark .chat-input {
            border-top: 1px solid #4b5563;
        }
        
        .chat-input input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 20px;
            outline: none;
            font-size: 0.875rem;
        }
        
        .dark .chat-input input {
            background-color: #374151;
            border: 1px solid #4b5563;
            color: white;
        }
        
        .chat-input button {
            margin-left: 8px;
            background-color: #5D5CDE;
            color: white;
            border: none;
            border-radius: 20px;
            padding: 0 12px;
            cursor: pointer;
        }
        
        .chat-input button:hover {
            background-color: #4945ca;
        }
        
        .chat-input button:disabled {
            background-color: #9ca3af;
            cursor: not-allowed;
        }
        
        .chat-badge {
            position: absolute;
            top: 2px;
            right: 2px;
            width: 8px;
            height: 8px;
            background-color: #ef4444;
            border-radius: 50%;
            display: none;
        }
        
        .chat-content {
            display: none;
        }
        
        .chat-content.active {
            display: flex;
            flex-direction: column;
            flex: 1;
        }
        
        /* AI chat styling */
        .ai-response p {
            margin-bottom: 0.5rem;
        }
        
        .ai-response a {
            color: #3B82F6;
            text-decoration: underline;
        }
        
        .dark .ai-response a {
            color: #60a5fa;
        }
        
        .ai-response ul, .ai-response ol {
            margin-left: 1.5rem;
            margin-bottom: 0.5rem;
        }
        
        .ai-response ul {
            list-style-type: disc;
        }
        
        .ai-response ol {
            list-style-type: decimal;
        }
        
        .ai-typing {
            display: flex;
            padding: 8px 12px;
            border-radius: 10px;
            background-color: #10b981;
            color: white;
            max-width: 90%;
            margin-bottom: 10px;
        }
        
        .dark .ai-typing {
            background-color: #059669;
        }
        
        .typing-dot {
            width: 8px;
            height: 8px;
            background-color: white;
            border-radius: 50%;
            margin: 0 2px;
            opacity: 0.6;
            animation: typingAnimation 1.5s infinite;
        }
        
        .typing-dot:nth-child(2) {
            animation-delay: 0.5s;
        }
        
        .typing-dot:nth-child(3) {
            animation-delay: 1s;
        }
        
        @keyframes typingAnimation {
            0%, 100% { opacity: 0.6; transform: translateY(0); }
            50% { opacity: 1; transform: translateY(-4px); }
        }
        
        /* Achievement styles */
        .achievement-item {
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .achievement-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
        }
        
        .achievement-locked {
            filter: grayscale(100%);
            opacity: 0.7;
        }
        
        .achievement-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            font-size: 20px;
        }
        
        .achievement-progress {
            height: 6px;
            background-color: #e5e7eb;
            border-radius: 3px;
            overflow: hidden;
        }
        
        .dark .achievement-progress {
            background-color: #4b5563;
        }
        
        .achievement-bar {
            height: 100%;
            border-radius: 3px;
            transition: width 0.5s ease-in-out;
        }
        
        @keyframes achievementUnlock {
            0% { transform: scale(0.8); opacity: 0; }
            50% { transform: scale(1.1); opacity: 1; }
            100% { transform: scale(1); opacity: 1; }
        }
        
        .achievement-unlocked {
            animation: achievementUnlock 0.5s forwards;
        }
    </style>
</head>
<body class="bg-white dark:bg-gray-900 min-h-screen">
    <!-- Loading Screen -->
    <div id="loadingScreen" class="loading-screen">
        <div class="loading-spinner mb-4"></div>
        <div class="text-lg font-bold text-gray-800 dark:text-gray-200">Loading Eco-Quest...</div>
        <div class="text-sm text-gray-600 dark:text-gray-400 mt-2">Saving the planet one game at a time</div>
    </div>
    
    <!-- Login Screen -->
    <div id="loginScreen" class="login-screen hidden">
        <div class="max-w-md w-full p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
            <h2 class="text-2xl font-bold text-center text-gray-800 dark:text-white mb-6">Welcome to Eco-Quest</h2>
            <form id="loginForm" class="space-y-4">
                <div>
                    <label for="username" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Username</label>
                    <input type="text" id="username" name="username" class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-800 dark:text-white focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" required minlength="3">
                </div>
                <div>
                    <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Password</label>
                    <input type="password" id="password" name="password" class="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-gray-800 dark:text-white focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" required minlength="4">
                </div>
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <input id="newAccount" name="newAccount" type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                        <label for="newAccount" class="ml-2 block text-sm text-gray-700 dark:text-gray-300">Create new account</label>
                    </div>
                </div>
                <div>
                    <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Sign In
                    </button>
                </div>
                <div class="text-center text-xs text-gray-600 dark:text-gray-400">
                    Note: This is a simulation. Your data will only be stored for this session.
                </div>
            </form>
        </div>
    </div>
    
    <!-- Notification container -->
    <div id="notificationContainer" class="notification-container"></div>

    <!-- Chat System -->
    <div id="chatContainer" class="chat-container">
        <div id="chatHeader" class="chat-header">
            <div>Eco-Quest Chat</div>
            <div class="flex gap-2">
                <button id="chatMinimizeBtn" class="text-white text-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>
        </div>
        <div class="chat-tabs">
            <div class="chat-tab active" data-tab="global">
                Global Chat
                <span class="chat-badge" id="globalChatBadge"></span>
            </div>
            <div class="chat-tab" data-tab="ai">
                AI Assistant
                <span class="chat-badge" id="aiChatBadge"></span>
            </div>
        </div>
        <div id="globalChatContent" class="chat-content active">
            <div id="globalChatMessages" class="chat-messages"></div>
            <div class="chat-input">
                <input type="text" id="globalChatInput" placeholder="Type your message..." maxlength="100">
                <button id="globalChatSend">Send</button>
            </div>
        </div>
        <div id="aiChatContent" class="chat-content">
            <div id="aiChatMessages" class="chat-messages"></div>
            <div class="chat-input">
                <input type="text" id="aiChatInput" placeholder="Ask about sustainability or food emissions...">
                <button id="aiChatSend">Ask</button>
            </div>
        </div>
    </div>

    <div class="container mx-auto px-4 py-6">
        <!-- Header with username, game title and balance -->
        <div class="flex flex-col mb-6">
            <div class="user-profile relative mb-2">
                <div id="userProfileButton" class="inline-flex items-center text-sm font-medium text-gray-800 dark:text-gray-200 bg-gray-100 dark:bg-gray-800 px-3 py-1 rounded-full cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-700">
                    <span id="usernameDisplay">Guest</span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </div>
                
                <div class="user-dropdown">
                    <div class="border-b border-gray-200 dark:border-gray-700 pb-2 mb-2">
                        <div class="text-sm text-gray-800 dark:text-gray-200 mb-1">
                            <span class="font-bold">Total Playtime:</span> <span id="totalPlaytime">0m 0s</span>
                        </div>
                        <div class="text-sm text-gray-800 dark:text-gray-200 mb-1">
                            <span class="font-bold">Session Playtime:</span> <span id="sessionPlaytime">0m 0s</span>
                        </div>
                        <div class="text-sm text-gray-800 dark:text-gray-200">
                            <span class="font-bold">Quests Completed:</span> <span id="questsCompleted">0/9</span>
                        </div>
                    </div>
                    <div class="flex flex-wrap gap-2">
                        <button id="inventoryBtn" class="text-sm bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-lg">
                            Inventory
                        </button>
                        <button id="achievementsBtn" class="text-sm bg-purple-500 hover:bg-purple-600 text-white px-3 py-1 rounded-lg">
                            Achievements
                        </button>
                        <button id="logoutBtn" class="text-sm bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded-lg">
                            Logout
                        </button>
                    </div>
                </div>
            </div>
            
            <header class="flex justify-between items-center">
                <h1 class="text-3xl md:text-4xl font-bold text-gray-800 dark:text-gray-200">Eco-Quest</h1>
                <div class="flex items-center gap-3">
                    <button id="chatToggleBtn" class="relative bg-indigo-500 hover:bg-indigo-600 p-2 rounded-lg text-white">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd" />
                        </svg>
                        <span id="chatBadge" class="absolute top-0 right-0 inline-block w-3 h-3 bg-red-500 rounded-full opacity-0 transition-opacity"></span>
                    </button>
                    <div class="bg-green-100 dark:bg-green-900 p-2 rounded-lg flex items-center">
                        <span class="text-green-700 dark:text-green-300 font-bold">$</span>
                        <span id="playerBalance" class="text-green-700 dark:text-green-300 font-bold ml-1">0</span>
                    </div>
                </div>
            </header>
        </div>
        
        <!-- 3D Cylinder Container -->
        <div id="cylinderContainer" class="w-full mb-8 bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden"></div>
        
        <!-- Main Category Buttons -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
            <button id="wildlifeBtn" class="btn-category bg-green-500 hover:bg-green-600 text-white p-4 rounded-lg flex flex-col items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                </svg>
                <span class="text-xl font-bold">Wildlife</span>
                <span class="text-sm mt-1">Tree Planting & Conservation</span>
            </button>
            <button id="industrialBtn" class="btn-category bg-red-500 hover:bg-red-600 text-white p-4 rounded-lg flex flex-col items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
                <span class="text-xl font-bold">Industrial</span>
                <span class="text-sm mt-1">Product Impact & Recycling</span>
            </button>
            <button id="transportationBtn" class="btn-category bg-blue-500 hover:bg-blue-600 text-white p-4 rounded-lg flex flex-col items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
                <span class="text-xl font-bold">Transportation</span>
                <span class="text-sm mt-1">Green Transit Options</span>
            </button>
        </div>
        
        <!-- Game Area -->
        <div id="gameArea" class="bg-gray-100 dark:bg-gray-800 rounded-lg p-6 min-h-[400px] mb-8">
            <div id="welcomeScreen" class="text-center">
                <h2 class="text-2xl font-bold mb-4 text-gray-800 dark:text-gray-200">Welcome to Eco-Quest!</h2>
                <p class="mb-6 text-gray-800 dark:text-gray-300">Choose a category to start your eco-friendly adventure. Complete quests to fill up your progress cylinders and earn rewards!</p>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="bg-white dark:bg-gray-700 rounded-lg p-4 shadow-md">
                        <div class="text-green-500 text-2xl mb-2">🌳 Wildlife</div>
                        <p class="text-gray-700 dark:text-gray-300">Plant trees, protect habitats, and nurture biodiversity in these interactive quests.</p>
                    </div>
                    <div class="bg-white dark:bg-gray-700 rounded-lg p-4 shadow-md">
                        <div class="text-red-500 text-2xl mb-2">🏭 Industrial</div>
                        <p class="text-gray-700 dark:text-gray-300">Discover the carbon footprint of everyday items and learn sustainable alternatives.</p>
                    </div>
                    <div class="bg-white dark:bg-gray-700 rounded-lg p-4 shadow-md">
                        <div class="text-blue-500 text-2xl mb-2">🚌 Transportation</div>
                        <p class="text-gray-700 dark:text-gray-300">Choose eco-friendly transit options and reduce your transportation emissions.</p>
                    </div>
                </div>
            </div>
            
            <div id="categoryScreen" class="hidden">
                <div class="flex justify-between items-center mb-6">
                    <h2 id="categoryTitle" class="text-2xl font-bold text-gray-800 dark:text-gray-200"></h2>
                    <button id="backToHome" class="bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500 px-4 py-2 rounded-lg text-gray-800 dark:text-white">
                        Back to Home
                    </button>
                </div>
                <div id="questsList" class="grid grid-cols-1 md:grid-cols-3 gap-4"></div>
            </div>
            
            <div id="miniGameScreen" class="hidden">
                <div class="flex justify-between items-center mb-6">
                    <h2 id="miniGameTitle" class="text-2xl font-bold text-gray-800 dark:text-gray-200"></h2>
                    <button id="quitMiniGame" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg">
                        Quit
                    </button>
                </div>
                <div class="mini-game-container bg-white dark:bg-gray-700 rounded-lg p-4 mb-4">
                    <div id="miniGameContent"></div>
                </div>
            </div>
            
            <div id="congratsScreen" class="hidden text-center">
                <h2 class="text-3xl font-bold mb-4 text-gray-800 dark:text-gray-200">Congratulations!</h2>
                <p class="text-xl mb-6 text-gray-800 dark:text-gray-300">You've completed all the quests and made a significant impact on reducing carbon emissions!</p>
                <div class="mb-6">
                    <div class="inline-block bg-green-500 text-white text-4xl p-6 rounded-full animate-bounce">
                        🏆
                    </div>
                </div>
                <p class="mb-6 text-gray-800 dark:text-gray-300">Your efforts have saved <span id="totalEmissionsSaved" class="font-bold">0</span> kg of CO2!</p>
                <button id="restartGame" class="bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-3 rounded-lg text-lg">
                    Play Again
                </button>
            </div>
            
            <!-- Inventory Screen -->
            <div id="inventoryScreen" class="hidden">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800 dark:text-gray-200">My Inventory</h2>
                    <button id="closeInventory" class="bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500 px-4 py-2 rounded-lg text-gray-800 dark:text-white">
                        Close
                    </button>
                </div>
                <div id="inventoryItems" class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <p class="text-gray-700 dark:text-gray-300 col-span-full text-center">You haven't purchased any items yet.</p>
                </div>
            </div>
            
            <!-- Achievements Screen -->
            <div id="achievementsScreen" class="hidden">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold text-gray-800 dark:text-gray-200">My Achievements</h2>
                    <button id="closeAchievements" class="bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500 px-4 py-2 rounded-lg text-gray-800 dark:text-white">
                        Close
                    </button>
                </div>
                <div id="achievementsContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <!-- Achievement items will be generated here -->
                </div>
            </div>
        </div>
        
        <!-- Shop Area -->
        <div id="shopArea" class="bg-gray-100 dark:bg-gray-800 rounded-lg p-6 mb-8">
            <h2 class="text-2xl font-bold mb-6 text-center text-gray-800 dark:text-gray-200">Eco Shop - Lower Hong Kong's Carbon Emissions</h2>
            <p class="text-center mb-6 text-gray-700 dark:text-gray-300">Purchase sustainable technologies and solutions to reduce carbon emissions in Hong Kong</p>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Shop Item 1 -->
                <div class="shop-item bg-white dark:bg-gray-700 rounded-lg p-4 shadow-md">
                    <div class="text-center mb-3">
                        <div class="text-4xl mb-2">🌬️</div>
                        <h3 class="text-xl font-bold text-gray-800 dark:text-gray-200">Air Filter System</h3>
                    </div>
                    <p class="text-gray-700 dark:text-gray-300 mb-4 text-sm">High-efficiency air purification system that removes carbon and pollutants from the atmosphere.</p>
                    <div class="flex justify-between text-sm mb-4">
                        <span class="text-gray-700 dark:text-gray-300">Cost: <span class="font-bold text-red-600 dark:text-red-400">$750</span></span>
                        <span class="text-gray-700 dark:text-gray-300">CO₂ Reduced: <span class="font-bold text-green-600 dark:text-green-400">50 kg</span></span>
                    </div>
                    <button class="shop-buy-btn w-full bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg transform transition-all" data-id="airFilter" data-cost="750" data-emission="50">
                        Purchase
                    </button>
                </div>
                
                <!-- Shop Item 2 -->
                <div class="shop-item bg-white dark:bg-gray-700 rounded-lg p-4 shadow-md">
                    <div class="text-center mb-3">
                        <div class="text-4xl mb-2">☀️</div>
                        <h3 class="text-xl font-bold text-gray-800 dark:text-gray-200">Solar Panel Array</h3>
                    </div>
                    <p class="text-gray-700 dark:text-gray-300 mb-4 text-sm">Renewable energy system that reduces reliance on fossil fuel-based electricity generation.</p>
                    <div class="flex justify-between text-sm mb-4">
                        <span class="text-gray-700 dark:text-gray-300">Cost: <span class="font-bold text-red-600 dark:text-red-400">$1200</span></span>
                        <span class="text-gray-700 dark:text-gray-300">CO₂ Reduced: <span class="font-bold text-green-600 dark:text-green-400">100 kg</span></span>
                    </div>
                    <button class="shop-buy-btn w-full bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg transform transition-all" data-id="solarPanel" data-cost="1200" data-emission="100">
                        Purchase
                    </button>
                </div>
                
                <!-- Shop Item 3 -->
                <div class="shop-item bg-white dark:bg-gray-700 rounded-lg p-4 shadow-md">
                    <div class="text-center mb-3">
                        <div class="text-4xl mb-2">🌱</div>
                        <h3 class="text-xl font-bold text-gray-800 dark:text-gray-200">Urban Garden Kit</h3>
                    </div>
                    <p class="text-gray-700 dark:text-gray-300 mb-4 text-sm">Vertical gardening system for urban spaces that absorbs CO2 and provides fresh local produce.</p>
                    <div class="flex justify-between text-sm mb-4">
                        <span class="text-gray-700 dark:text-gray-300">Cost: <span class="font-bold text-red-600 dark:text-red-400">$500</span></span>
                        <span class="text-gray-700 dark:text-gray-300">CO₂ Reduced: <span class="font-bold text-green-600 dark:text-green-400">30 kg</span></span>
                    </div>
                    <button class="shop-buy-btn w-full bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg transform transition-all" data-id="urbanGarden" data-cost="500" data-emission="30">
                        Purchase
                    </button>
                </div>
                
                <!-- Shop Item 4 -->
                <div class="shop-item bg-white dark:bg-gray-700 rounded-lg p-4 shadow-md">
                    <div class="text-center mb-3">
                        <div class="text-4xl mb-2">♻️</div>
                        <h3 class="text-xl font-bold text-gray-800 dark:text-gray-200">Waste Recycling Station</h3>
                    </div>
                    <p class="text-gray-700 dark:text-gray-300 mb-4 text-sm">Advanced recycling unit that efficiently sorts and processes waste materials to reduce landfill emissions.</p>
                    <div class="flex justify-between text-sm mb-4">
                        <span class="text-gray-700 dark:text-gray-300">Cost: <span class="font-bold text-red-600 dark:text-red-400">$800</span></span>
                        <span class="text-gray-700 dark:text-gray-300">CO₂ Reduced: <span class="font-bold text-green-600 dark:text-green-400">60 kg</span></span>
                    </div>
                    <button class="shop-buy-btn w-full bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg transform transition-all" data-id="recyclingStation" data-cost="800" data-emission="60">
                        Purchase
                    </button>
                </div>
                
                <!-- Shop Item 5 -->
                <div class="shop-item bg-white dark:bg-gray-700 rounded-lg p-4 shadow-md">
                    <div class="text-center mb-3">
                        <div class="text-4xl mb-2">🚲</div>
                        <h3 class="text-xl font-bold text-gray-800 dark:text-gray-200">Bike Sharing Infrastructure</h3>
                    </div>
                    <p class="text-gray-700 dark:text-gray-300 mb-4 text-sm">Urban bicycle network that reduces reliance on carbon-intensive transportation methods.</p>
                    <div class="flex justify-between text-sm mb-4">
                        <span class="text-gray-700 dark:text-gray-300">Cost: <span class="font-bold text-red-600 dark:text-red-400">$900</span></span>
                        <span class="text-gray-700 dark:text-gray-300">CO₂ Reduced: <span class="font-bold text-green-600 dark:text-green-400">80 kg</span></span>
                    </div>
                    <button class="shop-buy-btn w-full bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg transform transition-all" data-id="bikeSharing" data-cost="900" data-emission="80">
                        Purchase
                    </button>
                </div>
                
                <!-- Shop Item 6 -->
                <div class="shop-item bg-white dark:bg-gray-700 rounded-lg p-4 shadow-md">
                    <div class="text-center mb-3">
                        <div class="text-4xl mb-2">💧</div>
                        <h3 class="text-xl font-bold text-gray-800 dark:text-gray-200">Smart Water System</h3>
                    </div>
                    <p class="text-gray-700 dark:text-gray-300 mb-4 text-sm">Water conservation technology that reduces energy consumption for water treatment and distribution.</p>
                    <div class="flex justify-between text-sm mb-4">
                        <span class="text-gray-700 dark:text-gray-300">Cost: <span class="font-bold text-red-600 dark:text-red-400">$650</span></span>
                        <span class="text-gray-700 dark:text-gray-300">CO₂ Reduced: <span class="font-bold text-green-600 dark:text-green-400">40 kg</span></span>
                    </div>
                    <button class="shop-buy-btn w-full bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg transform transition-all" data-id="waterSystem" data-cost="650" data-emission="40">
                        Purchase
                    </button>
                </div>
            </div>
            
            <!-- Save Progress Button -->
            <div class="mt-8 text-center">
                <button id="saveProgress" class="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg">
                    Save Progress
                </button>
                <p class="text-sm text-gray-600 dark:text-gray-400 mt-2">Your progress will be saved to this session.</p>
            </div>
        </div>
    </div>

    <script>
        // Check for dark mode preference
        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            document.documentElement.classList.add('dark');
        }
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
            if (event.matches) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        });

        // Notification system
        const notificationSystem = {
            container: document.getElementById('notificationContainer'),
            activeNotifications: [],
            
            // Add notification
            show: function(message, type = 'info', duration = 3000) {
                // Create notification element
                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                notification.innerHTML = message;
                
                // Add to container
                this.container.appendChild(notification);
                
                // Add to active notifications
                this.activeNotifications.push(notification);
                
                // Position the notification
                this.updatePositions();
                
                // Set timeout to remove
                setTimeout(() => {
                    this.remove(notification);
                }, duration);
                
                return notification;
            },
            
            // Remove notification
            remove: function(notification) {
                // Add exit animation
                notification.style.opacity = '0';
                
                // Remove after animation
                setTimeout(() => {
                    // Remove from DOM
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                    
                    // Remove from active notifications
                    const index = this.activeNotifications.indexOf(notification);
                    if (index > -1) {
                        this.activeNotifications.splice(index, 1);
                    }
                    
                    // Update positions of remaining notifications
                    this.updatePositions();
                }, 300);
            },
            
            // Update positions of all notifications
            updatePositions: function() {
                let heightOffset = 0;
                
                // Position each notification
                this.activeNotifications.forEach(notification => {
                    notification.style.transform = `translateY(${heightOffset}px)`;
                    heightOffset += notification.offsetHeight + 4; // Reduced from 8px to 4px for closer stacking
                });
            },
            
            // Show success notification
            success: function(message, duration = 3000) {
                return this.show(message, 'success', duration);
            },
            
            // Show error notification
            error: function(message, duration = 3000) {
                return this.show(message, 'error', duration);
            },
            
            // Show info notification
            info: function(message, duration = 3000) {
                return this.show(message, 'info', duration);
            },
            
            // Show achievement notification
            achievement: function(message, duration = 5000) {
                return this.show(message, 'achievement', duration);
            }
        };

        // User session data
        const userSession = {
            username: "Guest",
            loggedIn: false,
            startTime: new Date(),
            totalPlaytime: 0, // in seconds
            sessionStartTime: new Date()
        };
        
        // Track playtime
        function updatePlaytime() {
            // Calculate session playtime
            const now = new Date();
            const sessionSeconds = Math.floor((now - userSession.sessionStartTime) / 1000);
            
            // Calculate total playtime
            const totalSeconds = userSession.totalPlaytime + sessionSeconds;
            
            // Format times
            const formatTime = (seconds) => {
                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = seconds % 60;
                return `${minutes}m ${remainingSeconds}s`;
            };
            
            // Update display
            document.getElementById('sessionPlaytime').textContent = formatTime(sessionSeconds);
            document.getElementById('totalPlaytime').textContent = formatTime(totalSeconds);
            
            // Update quest completion
            const totalCompleted = 
                gameState.categories.wildlife.completedQuests + 
                gameState.categories.industrial.completedQuests + 
                gameState.categories.transportation.completedQuests;
            
            document.getElementById('questsCompleted').textContent = `${totalCompleted}/9`;
            
            // Check time-based achievements
            checkPlaytimeAchievements(totalSeconds);
        }
        
        // Update playtime every second
        setInterval(updatePlaytime, 1000);

        // Login functionality
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const isNewAccount = document.getElementById('newAccount').checked;
            
            // Simple validation
            if (username.length < 3) {
                notificationSystem.error("Username must be at least 3 characters long");
                return;
            }
            
            if (password.length < 4) {
                notificationSystem.error("Password must be at least 4 characters long");
                return;
            }
            
            // Set user session
            userSession.username = username;
            userSession.loggedIn = true;
            userSession.sessionStartTime = new Date();
            
            // Update UI
            document.getElementById('usernameDisplay').textContent = username;
            
            // Hide login screen
            document.getElementById('loginScreen').classList.add('hidden');
            
            // Show welcome message
            notificationSystem.success(`
                <div class="font-bold">Welcome, ${username}!</div>
                <div>${isNewAccount ? 'Your account has been created.' : 'Welcome back!'}</div>
            `);
            
            // Check for first login achievement
            checkAchievement('firstLogin');
            
            // Show the chat intro message
            setTimeout(() => {
                addMessage('global', 'EcoGuide', 'Welcome to Eco-Quest! Chat with other players here or switch to the AI Assistant tab for sustainability tips and carbon footprint information.', false);
                addMessage('global', 'EcoEnthusiast', 'Hey everyone! Just saved 50kg of CO2 by completing the Wildlife quests!', false);
                highlightChatTab('global');
            }, 3000);
        });
        
        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', function() {
            // Save total playtime
            const sessionSeconds = Math.floor((new Date() - userSession.sessionStartTime) / 1000);
            userSession.totalPlaytime += sessionSeconds;
            
            // Reset session
            userSession.loggedIn = false;
            userSession.username = "Guest";
            
            // Update UI
            document.getElementById('usernameDisplay').textContent = "Guest";
            
            // Show login screen
            document.getElementById('loginScreen').classList.remove('hidden');
        });
        
        // Save progress functionality
        document.getElementById('saveProgress').addEventListener('click', function() {
            // In a real application, this would save to a server or local storage
            // Here we'll just show a notification
            notificationSystem.success("Progress Saved! Your game progress has been saved to this session.");
            
            // Check for save game achievement
            checkAchievement('firstSave');
        });
        
        // Inventory functionality
        document.getElementById('inventoryBtn').addEventListener('click', function() {
            hideAllScreens();
            updateInventoryDisplay();
            document.getElementById('inventoryScreen').classList.remove('hidden');
        });
        
        document.getElementById('closeInventory').addEventListener('click', function() {
            hideAllScreens();
            welcomeScreenEl.classList.remove('hidden');
        });
        
        // Achievements functionality
        document.getElementById('achievementsBtn').addEventListener('click', function() {
            hideAllScreens();
            renderAchievements();
            document.getElementById('achievementsScreen').classList.remove('hidden');
        });
        
        document.getElementById('closeAchievements').addEventListener('click', function() {
            hideAllScreens();
            welcomeScreenEl.classList.remove('hidden');
        });
        
        function updateInventoryDisplay() {
            const inventoryItemsEl = document.getElementById('inventoryItems');
            inventoryItemsEl.innerHTML = '';
            
            // Check if any items are purchased
            const purchasedItems = Object.entries(gameState.shopItems).filter(([id, item]) => item.purchased);
            
            if (purchasedItems.length === 0) {
                inventoryItemsEl.innerHTML = `<p class="text-gray-700 dark:text-gray-300 col-span-full text-center">You haven't purchased any items yet.</p>`;
                return;
            }
            
            // Item details mapping
            const itemDetails = {
                airFilter: { name: "Air Filter System", icon: "🌬️", emission: 50 },
                solarPanel: { name: "Solar Panel Array", icon: "☀️", emission: 100 },
                urbanGarden: { name: "Urban Garden Kit", icon: "🌱", emission: 30 },
                recyclingStation: { name: "Waste Recycling Station", icon: "♻️", emission: 60 },
                bikeSharing: { name: "Bike Sharing Infrastructure", icon: "🚲", emission: 80 },
                waterSystem: { name: "Smart Water System", icon: "💧", emission: 40 }
            };
            
            // Add purchased items to inventory display
            purchasedItems.forEach(([id, item]) => {
                const details = itemDetails[id];
                
                const itemEl = document.createElement('div');
                itemEl.className = 'bg-white dark:bg-gray-700 p-4 rounded-lg shadow-md';
                itemEl.innerHTML = `
                    <div class="text-center mb-3">
                        <div class="text-4xl mb-2">${details.icon}</div>
                        <h3 class="text-lg font-bold text-gray-800 dark:text-gray-200">${details.name}</h3>
                    </div>
                    <p class="text-gray-700 dark:text-gray-300 text-sm">CO₂ Reduced: <span class="font-bold text-green-600">${details.emission} kg</span></p>
                `;
                
                inventoryItemsEl.appendChild(itemEl);
            });
        }

        // Achievement System
        const achievements = [
            {
                id: 'firstLogin',
                title: 'Welcome to EcoQuest!',
                description: 'Log in to the game for the first time',
                icon: '🎮',
                color: 'bg-blue-500',
                unlocked: false,
                requirement: 1,
                progress: 0,
                reward: 100
            },
            {
                id: 'firstQuest',
                title: 'Baby Steps',
                description: 'Complete your first quest',
                icon: '🥇',
                color: 'bg-yellow-500',
                unlocked: false,
                requirement: 1,
                progress: 0,
                reward: 50
            },
            {
                id: 'wildlife',
                title: 'Nature Guardian',
                description: 'Complete all Wildlife quests',
                icon: '🌳',
                color: 'bg-green-500',
                unlocked: false,
                requirement: 3,
                progress: 0,
                reward: 150
            },
            {
                id: 'industrial',
                title: 'Clean Industry Pioneer',
                description: 'Complete all Industrial quests',
                icon: '🏭',
                color: 'bg-red-500',
                unlocked: false,
                requirement: 3,
                progress: 0,
                reward: 150
            },
            {
                id: 'transportation',
                title: 'Green Transit Expert',
                description: 'Complete all Transportation quests',
                icon: '🚌',
                color: 'bg-blue-500',
                unlocked: false,
                requirement: 3,
                progress: 0,
                reward: 150
            },
            {
                id: 'shopaholic',
                title: 'Eco Investor',
                description: 'Purchase 3 items from the shop',
                icon: '🛍️',
                color: 'bg-purple-500',
                unlocked: false,
                requirement: 3,
                progress: 0,
                reward: 100
            },
            {
                id: 'emissionsFighter',
                title: 'Climate Champion',
                description: 'Save 200kg of CO2 emissions',
                icon: '🌍',
                color: 'bg-green-600',
                unlocked: false,
                requirement: 200,
                progress: 0,
                reward: 200
            },
            {
                id: 'completeAll',
                title: 'Eco Warrior',
                description: 'Complete all quests across all categories',
                icon: '🏆',
                color: 'bg-yellow-600',
                unlocked: false,
                requirement: 9,
                progress: 0,
                reward: 300
            },
            {
                id: 'firstSave',
                title: 'Progress Keeper',
                description: 'Save your game progress for the first time',
                icon: '💾',
                color: 'bg-indigo-500',
                unlocked: false,
                requirement: 1,
                progress: 0,
                reward: 50
            },
            {
                id: 'playtime',
                title: 'Dedicated Environmentalist',
                description: 'Play Eco-Quest for 10 minutes',
                icon: '⏱️',
                color: 'bg-pink-500',
                unlocked: false,
                requirement: 600, // seconds
                progress: 0,
                reward: 100
            }
        ];
        
        function renderAchievements() {
            const container = document.getElementById('achievementsContainer');
            container.innerHTML = '';
            
            achievements.forEach(achievement => {
                const isUnlocked = achievement.unlocked;
                const progressPercent = Math.min(100, (achievement.progress / achievement.requirement) * 100);
                
                const achievementEl = document.createElement('div');
                achievementEl.className = `achievement-item bg-white dark:bg-gray-700 ${isUnlocked ? '' : 'achievement-locked'}`;
                achievementEl.innerHTML = `
                    <div class="p-4">
                        <div class="flex items-center mb-3">
                            <div class="achievement-icon ${achievement.color} text-white mr-3">
                                ${achievement.icon}
                            </div>
                            <div>
                                <h3 class="font-bold text-gray-800 dark:text-gray-200">${achievement.title}</h3>
                                <p class="text-sm text-gray-600 dark:text-gray-400">${achievement.description}</p>
                            </div>
                        </div>
                        <div class="mb-2">
                            <div class="flex justify-between text-xs mb-1">
                                <span class="text-gray-600 dark:text-gray-400">Progress: ${achievement.progress}/${achievement.requirement}</span>
                                <span class="text-gray-600 dark:text-gray-400">Reward: $${achievement.reward}</span>
                            </div>
                            <div class="achievement-progress">
                                <div class="achievement-bar ${achievement.color}" style="width: ${progressPercent}%"></div>
                            </div>
                        </div>
                        <div class="text-sm ${isUnlocked ? 'text-green-600 dark:text-green-400' : 'text-gray-500 dark:text-gray-500'}">
                            ${isUnlocked ? '✓ Unlocked' : 'Locked'}
                        </div>
                    </div>
                `;
                
                container.appendChild(achievementEl);
            });
        }
        
        function checkAchievement(id) {
            const achievement = achievements.find(a => a.id === id);
            if (!achievement || achievement.unlocked) return;
            
            switch(id) {
                case 'firstLogin':
                    achievement.progress = 1;
                    break;
                case 'firstQuest':
                    achievement.progress = 1;
                    break;
                case 'wildlife':
                    achievement.progress = gameState.categories.wildlife.completedQuests;
                    break;
                case 'industrial':
                    achievement.progress = gameState.categories.industrial.completedQuests;
                    break;
                case 'transportation':
                    achievement.progress = gameState.categories.transportation.completedQuests;
                    break;
                case 'shopaholic':
                    achievement.progress = Object.values(gameState.shopItems).filter(item => item.purchased).length;
                    break;
                case 'emissionsFighter':
                    achievement.progress = gameState.emissionsSaved;
                    break;
                case 'completeAll':
                    achievement.progress = gameState.categories.wildlife.completedQuests + 
                                         gameState.categories.industrial.completedQuests + 
                                         gameState.categories.transportation.completedQuests;
                    break;
                case 'firstSave':
                    achievement.progress = 1;
                    break;
            }
            
            // Check if achievement is now unlocked
            if (achievement.progress >= achievement.requirement && !achievement.unlocked) {
                achievement.unlocked = true;
                gameState.balance += achievement.reward;
                updateBalance();
                
                // Show notification
                notificationSystem.achievement(`
                    <div class="font-bold">Achievement Unlocked!</div>
                    <div>${achievement.title}</div>
                    <div class="text-sm">+$${achievement.reward}</div>
                `);
                
                // Add to game chat
                addMessage('global', 'EcoSystem', `${userSession.username} just earned the "${achievement.title}" achievement!`, false);
                highlightChatTab('global');
            }
        }
        
        function checkPlaytimeAchievements(totalSeconds) {
            const playtimeAchievement = achievements.find(a => a.id === 'playtime');
            if (playtimeAchievement && !playtimeAchievement.unlocked) {
                playtimeAchievement.progress = totalSeconds;
                
                if (playtimeAchievement.progress >= playtimeAchievement.requirement) {
                    checkAchievement('playtime');
                }
            }
        }
        
        function checkQuestAchievements() {
            // Check individual category achievements
            if (gameState.categories.wildlife.completedQuests === 3) {
                checkAchievement('wildlife');
            }
            
            if (gameState.categories.industrial.completedQuests === 3) {
                checkAchievement('industrial');
            }
            
            if (gameState.categories.transportation.completedQuests === 3) {
                checkAchievement('transportation');
            }
            
            // Check all quests achievement
            checkAchievement('completeAll');
            
            // Check emissions saved achievement
            checkAchievement('emissionsFighter');
        }

        // Game state
        const gameState = {
            balance: 1000, // Starting cash
            categories: {
                wildlife: {
                    name: "Wildlife",
                    color: "#4CAF50",
                    completedQuests: 0,
                    quests: [
                        {
                            id: "wildlife1",
                            title: "Tree Planting Expedition",
                            description: "Plant as many trees as possible within the time limit to absorb CO2.",
                            completed: false,
                            reward: 250,
                            emissionSaved: 20
                        },
                        {
                            id: "wildlife2",
                            title: "Ecosystem Protection",
                            description: "Guide animals to safety zones while avoiding pollution hazards.",
                            completed: false,
                            reward: 300,
                            emissionSaved: 25
                        },
                        {
                            id: "wildlife3",
                            title: "Forest Management",
                            description: "Balance tree harvesting with replanting to maintain forest health.",
                            completed: false,
                            reward: 350,
                            emissionSaved: 30
                        }
                    ]
                },
                industrial: {
                    name: "Industrial",
                    color: "#F44336",
                    completedQuests: 0,
                    quests: [
                        {
                            id: "industrial1",
                            title: "Plastic Reduction",
                            description: "Sort products to find alternatives with lower plastic content.",
                            completed: false,
                            reward: 250,
                            emissionSaved: 15
                        },
                        {
                            id: "industrial2",
                            title: "Factory Emissions Audit",
                            description: "Identify and fix sources of pollution in a virtual factory.",
                            completed: false,
                            reward: 300,
                            emissionSaved: 30
                        },
                        {
                            id: "industrial3",
                            title: "Recycling Master",
                            description: "Sort waste items into correct recycling categories against the clock.",
                            completed: false,
                            reward: 350,
                            emissionSaved: 25
                        }
                    ]
                },
                transportation: {
                    name: "Transportation",
                    color: "#2196F3",
                    completedQuests: 0,
                    quests: [
                        {
                            id: "transportation1",
                            title: "Green Commuter",
                            description: "Plan the most eco-friendly route to work using public transit options.",
                            completed: false,
                            reward: 250,
                            emissionSaved: 15
                        },
                        {
                            id: "transportation2",
                            title: "Public Transport Planner",
                            description: "Design an efficient bus route system to maximize accessibility.",
                            completed: false,
                            reward: 300,
                            emissionSaved: 25
                        },
                        {
                            id: "transportation3",
                            title: "Bike Path Builder",
                            description: "Design an efficient bike path network for a virtual city.",
                            completed: false,
                            reward: 350,
                            emissionSaved: 20
                        }
                    ]
                }
            },
            currentCategory: null,
            currentQuest: null,
            emissionsSaved: 0,
            shopItems: {
                airFilter: { purchased: false },
                solarPanel: { purchased: false },
                urbanGarden: { purchased: false },
                recyclingStation: { purchased: false },
                bikeSharing: { purchased: false },
                waterSystem: { purchased: false }
            }
        };

        // DOM elements
        const playerBalanceEl = document.getElementById('playerBalance');
        const wildlifeBtnEl = document.getElementById('wildlifeBtn');
        const industrialBtnEl = document.getElementById('industrialBtn');
        const transportationBtnEl = document.getElementById('transportationBtn');
        const gameAreaEl = document.getElementById('gameArea');
        const welcomeScreenEl = document.getElementById('welcomeScreen');
        const categoryScreenEl = document.getElementById('categoryScreen');
        const miniGameScreenEl = document.getElementById('miniGameScreen');
        const congratsScreenEl = document.getElementById('congratsScreen');
        const inventoryScreenEl = document.getElementById('inventoryScreen');
        const achievementsScreenEl = document.getElementById('achievementsScreen');
        const categoryTitleEl = document.getElementById('categoryTitle');
        const questsListEl = document.getElementById('questsList');
        const miniGameTitleEl = document.getElementById('miniGameTitle');
        const miniGameContentEl = document.getElementById('miniGameContent');
        const backToHomeEl = document.getElementById('backToHome');
        const quitMiniGameEl = document.getElementById('quitMiniGame');
        const restartGameEl = document.getElementById('restartGame');
        const totalEmissionsSavedEl = document.getElementById('totalEmissionsSaved');
        
        // Initialize Three.js scene for cylinders
        let scene, camera, renderer;
        let wildlifeCylinder, industrialCylinder, transportationCylinder;
        
        function initCylinders() {
            const container = document.getElementById('cylinderContainer');
            const width = container.clientWidth;
            const height = container.clientHeight;
            
            // Create scene
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(50, width / height, 0.1, 1000);
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(width, height);
            container.appendChild(renderer.domElement);
            
            // Lighting
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(0, 10, 10);
            scene.add(directionalLight);
            
            // Create cylinders
            const cylinderGeometry = new THREE.CylinderGeometry(1, 1, 4, 32);
            const cylinderPositions = [-4, 0, 4]; // x-positions for the three cylinders
            
            // Wildlife cylinder (green)
            const wildlifeMaterial = new THREE.MeshPhongMaterial({ 
                color: gameState.categories.wildlife.color,
                transparent: true,
                opacity: 0.7
            });
            wildlifeCylinder = new THREE.Mesh(cylinderGeometry, wildlifeMaterial);
            wildlifeCylinder.position.set(cylinderPositions[0], 0, 0);
            wildlifeCylinder.scale.y = 0.1; // Start almost empty
            scene.add(wildlifeCylinder);
            
            // Industrial cylinder (red)
            const industrialMaterial = new THREE.MeshPhongMaterial({ 
                color: gameState.categories.industrial.color,
                transparent: true,
                opacity: 0.7
            });
            industrialCylinder = new THREE.Mesh(cylinderGeometry, industrialMaterial);
            industrialCylinder.position.set(cylinderPositions[1], 0, 0);
            industrialCylinder.scale.y = 0.1; // Start almost empty
            scene.add(industrialCylinder);
            
            // Transportation cylinder (blue)
            const transportationMaterial = new THREE.MeshPhongMaterial({ 
                color: gameState.categories.transportation.color,
                transparent: true,
                opacity: 0.7
            });
            transportationCylinder = new THREE.Mesh(cylinderGeometry, transportationMaterial);
            transportationCylinder.position.set(cylinderPositions[2], 0, 0);
            transportationCylinder.scale.y = 0.1; // Start almost empty
            scene.add(transportationCylinder);
            
            // Add cylinder labels
            addCylinderLabel("Wildlife", cylinderPositions[0], -3, 0);
            addCylinderLabel("Industrial", cylinderPositions[1], -3, 0);
            addCylinderLabel("Transportation", cylinderPositions[2], -3, 0);
            
            // Position camera
            camera.position.set(0, 0, 10);
            camera.lookAt(0, 0, 0);
            
            // Start animation loop
            animate();
            
            // Handle window resize
            window.addEventListener('resize', () => {
                const newWidth = container.clientWidth;
                const newHeight = container.clientHeight;
                camera.aspect = newWidth / newHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(newWidth, newHeight);
            });
        }
        
        function addCylinderLabel(text, x, y, z) {
            const canvas = document.createElement('canvas');
            const context = canvas.getContext('2d');
            canvas.width = 512; // Increased for better quality
            canvas.height = 128; // Increased for better quality
            context.font = 'bold 64px Nunito, sans-serif'; // Much larger font
            context.textAlign = 'center';
            context.fillStyle = document.documentElement.classList.contains('dark') ? '#ffffff' : '#000000';
            context.fillText(text, 256, 80); // Adjusted position for larger text
            
            const texture = new THREE.CanvasTexture(canvas);
            const material = new THREE.MeshBasicMaterial({
                map: texture,
                transparent: true,
                side: THREE.DoubleSide
            });
            const geometry = new THREE.PlaneGeometry(4, 1); // Larger plane size for bigger text
            const mesh = new THREE.Mesh(geometry, material);
            mesh.position.set(x, y, z);
            mesh.rotation.x = -0.2;
            scene.add(mesh);
        }
        
        function animate() {
            requestAnimationFrame(animate);
            
            // Add some gentle rotation to cylinders
            wildlifeCylinder.rotation.y += 0.01;
            industrialCylinder.rotation.y += 0.01;
            transportationCylinder.rotation.y += 0.01;
            
            renderer.render(scene, camera);
        }
        
        function updateCylinders() {
            // Calculate fill levels (0.1 to 1.0 based on completed quests)
            const wildlifeLevel = 0.1 + (gameState.categories.wildlife.completedQuests / 3) * 0.9;
            const industrialLevel = 0.1 + (gameState.categories.industrial.completedQuests / 3) * 0.9;
            const transportationLevel = 0.1 + (gameState.categories.transportation.completedQuests / 3) * 0.9;
            
            // Animate cylinders to new levels
            animateCylinder(wildlifeCylinder, wildlifeLevel);
            animateCylinder(industrialCylinder, industrialLevel);
            animateCylinder(transportationCylinder, transportationLevel);
        }
        
        function animateCylinder(cylinder, targetScale) {
            const duration = 1000; // ms
            const startScale = cylinder.scale.y;
            const startTime = Date.now();
            
            function updateScale() {
                const elapsed = Date.now() - startTime;
                const progress = Math.min(elapsed / duration, 1);
                
                cylinder.scale.y = startScale + (targetScale - startScale) * progress;
                
                if (progress < 1) {
                    requestAnimationFrame(updateScale);
                }
            }
            
            updateScale();
        }
        
        // Update UI with current balance
        function updateBalance() {
            playerBalanceEl.textContent = gameState.balance;
        }
        
        // Show the quests for a specific category
        function showCategoryQuests(categoryId) {
            const category = gameState.categories[categoryId];
            gameState.currentCategory = categoryId;
            
            // Update the category title
            categoryTitleEl.textContent = category.name + " Quests";
            categoryTitleEl.className = "text-2xl font-bold";
            if (categoryId === "wildlife") {
                categoryTitleEl.classList.add("text-green-600", "dark:text-green-400");
            } else if (categoryId === "industrial") {
                categoryTitleEl.classList.add("text-red-600", "dark:text-red-400");
            } else if (categoryId === "transportation") {
                categoryTitleEl.classList.add("text-blue-600", "dark:text-blue-400");
            }
            
            // Clear existing quests
            questsListEl.innerHTML = "";
            
            // Add quests to the list
            category.quests.forEach(quest => {
                const questCard = document.createElement('div');
                questCard.className = `bg-white dark:bg-gray-700 rounded-lg p-4 shadow-md transition-all hover:shadow-lg relative overflow-hidden ${quest.completed ? 'opacity-60' : ''}`;
                
                const questTitle = document.createElement('h3');
                questTitle.className = "text-lg font-bold mb-2 text-gray-800 dark:text-gray-200";
                questTitle.textContent = quest.title;
                
                const questDescription = document.createElement('p');
                questDescription.className = "text-gray-700 dark:text-gray-300 mb-4 text-sm";
                questDescription.textContent = quest.description;
                
                const questReward = document.createElement('div');
                questReward.className = "text-sm flex items-center justify-between";
                questReward.innerHTML = `
                    <span class="text-gray-700 dark:text-gray-300">Reward: <span class="font-bold text-green-600 dark:text-green-400">$${quest.reward}</span></span>
                    <span class="text-gray-700 dark:text-gray-300">CO₂ Saved: <span class="font-bold text-blue-600 dark:text-blue-400">${quest.emissionSaved} kg</span></span>
                `;
                
                const questButton = document.createElement('button');
                if (quest.completed) {
                    questButton.className = "mt-4 w-full bg-green-600 cursor-default text-white px-4 py-2 rounded-lg";
                    questButton.textContent = "Completed ✓";
                    questButton.disabled = true;
                } else {
                    questButton.className = "mt-4 w-full bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg";
                    questButton.textContent = "Start Quest";
                    questButton.onclick = () => startMiniGame(quest.id);
                }
                
                questCard.appendChild(questTitle);
                questCard.appendChild(questDescription);
                questCard.appendChild(questReward);
                questCard.appendChild(questButton);
                
                questsListEl.appendChild(questCard);
            });
            
            // Show "all quests completed" message if all are completed
            if (category.completedQuests === 3) {
                const completedMessage = document.createElement('div');
                completedMessage.className = "col-span-full text-center p-4 bg-green-100 dark:bg-green-900 rounded-lg shadow-md";
                completedMessage.innerHTML = `
                    <p class="text-gray-700 dark:text-gray-300">You've completed all quests in this category! 🎉</p>
                `;
                questsListEl.prepend(completedMessage);
            }
            
            // Show category screen
            hideAllScreens();
            categoryScreenEl.classList.remove('hidden');
            categoryScreenEl.classList.add('fade-in');
        }
        
        // Start a mini-game
        function startMiniGame(questId) {
            const category = gameState.categories[gameState.currentCategory];
            const quest = category.quests.find(q => q.id === questId);
            gameState.currentQuest = quest;
            
            // Set mini-game title
            miniGameTitleEl.textContent = quest.title;
            
            // Load the specific mini-game content
            loadMiniGameContent(questId);
            
            // Show mini-game screen
            hideAllScreens();
            miniGameScreenEl.classList.remove('hidden');
            miniGameScreenEl.classList.add('fade-in');
        }
        
        // Load content for specific mini-games
        function loadMiniGameContent(questId) {
            miniGameContentEl.innerHTML = '';
            
            // Each mini-game has its own implementation
            if (questId === "wildlife1") {
                loadTreePlantingMiniGame();
            } else if (questId === "wildlife2") {
                loadEcosystemProtectionMiniGame();
            } else if (questId === "wildlife3") {
                loadForestManagementMiniGame();
            } else if (questId === "industrial1") {
                loadPlasticReductionMiniGame();
            } else if (questId === "industrial2") {
                loadFactoryEmissionsAuditMiniGame();
            } else if (questId === "industrial3") {
                loadRecyclingMasterMiniGame();
            } else if (questId === "transportation1") {
                loadGreenCommuterMiniGame();
            } else if (questId === "transportation2") {
                loadPublicTransportPlannerMiniGame();
            } else if (questId === "transportation3") {
                loadBikePathBuilderMiniGame();
            }
        }
        
        // Mini-game implementations
        function loadTreePlantingMiniGame() {
            let treesPlanted = 0;
            let timeLeft = 30;
            let gameActive = true;
            
            const gameContainer = document.createElement('div');
            gameContainer.innerHTML = `
                <div class="text-center mb-4">
                    <div class="text-2xl mb-2 text-gray-800 dark:text-gray-200">Trees Planted: <span id="treesPlanted">0</span></div>
                    <div class="text-xl text-gray-800 dark:text-gray-200">Time Left: <span id="timeLeft">30</span>s</div>
                    <div class="w-full bg-gray-200 rounded-full h-4 mt-2">
                        <div id="timeBar" class="bg-blue-600 h-4 rounded-full" style="width: 100%"></div>
                    </div>
                </div>
                
                <div class="text-gray-800 dark:text-gray-200 bg-yellow-100 dark:bg-yellow-900 p-4 rounded-lg mb-4">
                    <p class="font-bold">Instructions:</p>
                    <p>Click anywhere in the planting area below to plant trees. Each tree absorbs CO2. Plant as many as you can before time runs out!</p>
                </div>
                
                <div class="bg-green-100 dark:bg-green-900 p-4 rounded-lg min-h-[200px] relative" id="plantingArea">
                    <div class="text-center mb-4 text-gray-800 dark:text-gray-200">Click anywhere on the ground to plant trees!</div>
                </div>
            `;
            
            miniGameContentEl.appendChild(gameContainer);
            
            const treesPlantedEl = document.getElementById('treesPlanted');
            const timeLeftEl = document.getElementById('timeLeft');
            const timeBarEl = document.getElementById('timeBar');
            const plantingAreaEl = document.getElementById('plantingArea');
            
            // Add click event to planting area
            plantingAreaEl.addEventListener('click', (e) => {
                if (!gameActive) return;
                
                // Get click position relative to planting area
                const rect = plantingAreaEl.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                // Plant a tree at the click position
                const tree = document.createElement('div');
                tree.className = 'absolute text-4xl';
                tree.style.left = `${x - 10}px`;
                tree.style.top = `${y - 20}px`;
                tree.textContent = '🌳';
                tree.classList.add('fade-in');
                
                plantingAreaEl.appendChild(tree);
                
                // Increment tree count
                treesPlanted++;
                treesPlantedEl.textContent = treesPlanted;
            });
            
            // Timer
            const timer = setInterval(() => {
                timeLeft--;
                timeLeftEl.textContent = timeLeft;
                timeBarEl.style.width = `${(timeLeft / 30) * 100}%`;
                
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    gameActive = false;
                    
                    // Show results
                    const resultEl = document.createElement('div');
                    resultEl.className = 'bg-white dark:bg-gray-800 p-4 rounded-lg text-center mt-4 slide-in';
                    resultEl.id = 'gameResultScreen'; // Add ID for easy reference
                    
                    const co2Saved = treesPlanted * 2; // Each tree saves 2kg of CO2 in this game
                    
                    resultEl.innerHTML = `
                        <h3 class="text-xl font-bold mb-2 text-gray-800 dark:text-gray-200">Quest Complete!</h3>
                        <p class="mb-2 text-gray-700 dark:text-gray-300">You planted ${treesPlanted} trees, which will absorb approximately ${co2Saved} kg of CO2 over time!</p>
                        <div class="flex justify-between text-sm mb-4">
                            <span class="text-gray-700 dark:text-gray-300">Reward: <span class="font-bold text-green-600 dark:text-green-400">$${gameState.currentQuest.reward}</span></span>
                            <span class="text-gray-700 dark:text-gray-300">CO₂ Saved: <span class="font-bold text-blue-600 dark:text-blue-400">${gameState.currentQuest.emissionSaved} kg</span></span>
                        </div>
                        <button id="claimReward" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg">
                            Claim Reward
                        </button>
                    `;
                    
                    miniGameContentEl.appendChild(resultEl);
                    
                    // Hide the quit button
                    quitMiniGameEl.classList.add('hidden');
                    
                    document.getElementById('claimReward').addEventListener('click', () => {
                        completeQuest();
                    });
                }
            }, 1000);
            
            // Clean up when leaving the mini-game
            quitMiniGameEl.addEventListener('click', () => {
                clearInterval(timer);
            }, { once: true });
        }
        
        function loadEcosystemProtectionMiniGame() {
            const animals = ['🦊', '🐻', '🦌', '🐿️', '🦅'];
            let score = 0;
            let timeLeft = 30;
            let gameActive = true;
            let selectedAnimal = null;
            
            const gameContainer = document.createElement('div');
            gameContainer.innerHTML = `
                <div class="text-center mb-4">
                    <div class="text-2xl mb-2 text-gray-800 dark:text-gray-200">Animals Saved: <span id="animalsSaved">0</span></div>
                    <div class="text-xl text-gray-800 dark:text-gray-200">Time Left: <span id="timeLeft">30</span>s</div>
                    <div class="w-full bg-gray-200 rounded-full h-4 mt-2">
                        <div id="timeBar" class="bg-blue-600 h-4 rounded-full" style="width: 100%"></div>
                    </div>
                </div>
                
                <div class="text-gray-800 dark:text-gray-200 bg-yellow-100 dark:bg-yellow-900 p-4 rounded-lg mb-4">
                    <p class="font-bold">Instructions:</p>
                    <p>1. Click on an animal to select it</p>
                    <p>2. Then click the "Save Selected Animal" button to rescue it</p>
                    <p>3. Save as many animals as you can before time runs out!</p>
                </div>
                
                <div class="bg-green-100 dark:bg-green-900 p-4 rounded-lg min-h-[300px] relative" id="gameField">
                    <div id="safeZone" class="absolute bottom-0 left-0 right-0 h-16 bg-green-300 dark:bg-green-700 flex items-center justify-center">
                        <button id="saveButton" class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                            Save Selected Animal
                        </button>
                    </div>
                    <div id="pollutionElements" class="absolute top-0 left-0 right-0 bottom-16">
                        <!-- Pollution hazards will be added here -->
                    </div>
                    <div id="animalElements" class="absolute top-0 left-0 right-0 bottom-16">
                        <div class="text-center mt-4 mb-2 text-gray-800 dark:text-gray-200">Click on an animal to select it, then click "Save" button.</div>
                        <!-- Animals will be added here -->
                    </div>
                </div>
            `;
            
            miniGameContentEl.appendChild(gameContainer);
            
            const animalsSavedEl = document.getElementById('animalsSaved');
            const timeLeftEl = document.getElementById('timeLeft');
            const timeBarEl = document.getElementById('timeBar');
            const gameFieldEl = document.getElementById('gameField');
            const saveButtonEl = document.getElementById('saveButton');
            const pollutionElementsEl = document.getElementById('pollutionElements');
            const animalElementsEl = document.getElementById('animalElements');
            
            // Add pollution hazards
            const pollutionTypes = ['🏭', '☢️', '🗑️'];
            for (let i = 0; i < 6; i++) {
                const pollution = document.createElement('div');
                pollution.className = 'absolute text-4xl pollution';
                pollution.textContent = pollutionTypes[Math.floor(Math.random() * pollutionTypes.length)];
                pollution.style.left = `${Math.random() * 90}%`;
                pollution.style.top = `${Math.random() * 70}%`;
                pollutionElementsEl.appendChild(pollution);
            }
            
            // Enable save button when an animal is selected
            saveButtonEl.addEventListener('click', () => {
                if (selectedAnimal && gameActive) {
                    selectedAnimal.remove();
                    selectedAnimal = null;
                    saveButtonEl.disabled = true;
                    score++;
                    animalsSavedEl.textContent = score;
                }
            });
            
            // Spawn animals
            function spawnAnimal() {
                if (!gameActive) return;
                
                const animal = document.createElement('div');
                animal.className = 'absolute text-3xl animal';
                animal.textContent = animals[Math.floor(Math.random() * animals.length)];
                animal.style.left = `${Math.random() * 90}%`;
                animal.style.top = `${Math.random() * 60}%`;
                
                // Make animal clickable for selection
                animal.addEventListener('click', (e) => {
                    if (!gameActive) return;
                    
                    // Deselect previous animal if any
                    if (selectedAnimal) {
                        selectedAnimal.classList.remove('selected');
                    }
                    
                    // Select this animal
                    selectedAnimal = animal;
                    animal.classList.add('selected');
                    saveButtonEl.disabled = false;
                    
                    e.stopPropagation();
                });
                
                animalElementsEl.appendChild(animal);
                
                // Schedule next animal
                if (gameActive) {
                    setTimeout(spawnAnimal, Math.random() * 2000 + 1000);
                }
            }
            
            // Start game
            spawnAnimal();
            
            // Timer
            const timer = setInterval(() => {
                timeLeft--;
                timeLeftEl.textContent = timeLeft;
                timeBarEl.style.width = `${(timeLeft / 30) * 100}%`;
                
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    gameActive = false;
                    saveButtonEl.disabled = true;
                    
                    // Show results
                    const resultEl = document.createElement('div');
                    resultEl.className = 'bg-white dark:bg-gray-800 p-4 rounded-lg text-center mt-4 slide-in';
                    resultEl.id = 'gameResultScreen'; // Add ID for easy reference
                    
                    resultEl.innerHTML = `
                        <h3 class="text-xl font-bold mb-2 text-gray-800 dark:text-gray-200">Quest Complete!</h3>
                        <p class="mb-2 text-gray-700 dark:text-gray-300">You saved ${score} animals from pollution hazards!</p>
                        <div class="flex justify-between text-sm mb-4">
                            <span class="text-gray-700 dark:text-gray-300">Reward: <span class="font-bold text-green-600 dark:text-green-400">$${gameState.currentQuest.reward}</span></span>
                            <span class="text-gray-700 dark:text-gray-300">CO₂ Saved: <span class="font-bold text-blue-600 dark:text-blue-400">${gameState.currentQuest.emissionSaved} kg</span></span>
                        </div>
                        <button id="claimReward" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg">
                            Claim Reward
                        </button>
                    `;
                    
                    miniGameContentEl.appendChild(resultEl);
                    
                    // Hide the quit button
                    quitMiniGameEl.classList.add('hidden');
                    
                    document.getElementById('claimReward').addEventListener('click', () => {
                        completeQuest();
                    });
                }
            }, 1000);
            
            // Clean up when leaving the mini-game
            quitMiniGameEl.addEventListener('click', () => {
                clearInterval(timer);
                gameActive = false;
            }, { once: true });
        }
        
        function loadForestManagementMiniGame() {
            let score = 0;
            let trees = 60; // Starting with more trees
            let sustainability = 60; // Starting with higher sustainability
            let roundsLeft = 12; // More rounds available
            let gameIsOver = false; // Track if game is over to prevent multiple result screens
            
            const gameContainer = document.createElement('div');
            gameContainer.innerHTML = `
                <div class="text-center mb-4">
                    <div class="text-xl mb-2 text-gray-800 dark:text-gray-200">Balance forest harvesting with conservation</div>
                    <div class="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <div class="text-lg text-gray-800 dark:text-gray-200">Trees: <span id="treeCount">${trees}</span>/100</div>
                            <div class="w-full bg-gray-200 rounded-full h-4 mt-1">
                                <div id="treeBar" class="bg-green-600 h-4 rounded-full" style="width: ${Math.min(100, trees)}%"></div>
                            </div>
                        </div>
                        <div>
                            <div class="text-lg text-gray-800 dark:text-gray-200">Sustainability: <span id="sustainScore">${sustainability}</span>/100</div>
                            <div class="w-full bg-gray-200 rounded-full h-4 mt-1">
                                <div id="sustainBar" class="bg-blue-600 h-4 rounded-full" style="width: ${Math.min(100, sustainability)}%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="text-lg mb-2 text-gray-800 dark:text-gray-200">Rounds Left: <span id="roundsLeft">${roundsLeft}</span></div>
                </div>
                
                <div class="text-gray-800 dark:text-gray-200 bg-yellow-100 dark:bg-yellow-900 p-4 rounded-lg mb-4">
                    <p class="font-bold">Instructions:</p>
                    <p>1. Choose between harvesting trees or planting new ones each round</p>
                    <p>2. Harvesting reduces trees but improves sustainability</p>
                    <p>3. Planting increases trees but temporarily reduces sustainability</p>
                    <p>4. Your goal is to reach 100% on both trees and sustainability bars to complete the challenge</p>
                    <p>5. Watch out for random events that might affect your forest!</p>
                </div>
                
                <div class="bg-green-100 dark:bg-green-900 p-4 rounded-lg">
                    <div class="text-center mb-4 text-gray-800 dark:text-gray-200">Choose your forest management actions:</div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <button id="harvestBtn" class="bg-amber-600 hover:bg-amber-700 text-white py-3 px-4 rounded-lg flex flex-col items-center">
                            <span class="text-2xl mb-1">🪓</span>
                            <span class="font-bold">Harvest Trees</span>
                            <span class="text-sm">(-3 trees, +15 sustainability)</span>
                        </button>
                        <button id="plantBtn" class="bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg flex flex-col items-center">
                            <span class="text-2xl mb-1">🌱</span>
                            <span class="font-bold">Plant Trees</span>
                            <span class="text-sm">(+12 trees, -3 sustainability)</span>
                        </button>
                    </div>
                    <div id="actionResult" class="text-center mt-4 hidden"></div>
                </div>
            `;
            
            miniGameContentEl.appendChild(gameContainer);
            
            const treeCountEl = document.getElementById('treeCount');
            const sustainScoreEl = document.getElementById('sustainScore');
            const roundsLeftEl = document.getElementById('roundsLeft');
            const treeBarEl = document.getElementById('treeBar');
            const sustainBarEl = document.getElementById('sustainBar');
            const harvestBtnEl = document.getElementById('harvestBtn');
            const plantBtnEl = document.getElementById('plantBtn');
            const actionResultEl = document.getElementById('actionResult');
            
            function updateUI() {
                // Display capped values (max 100), but internally allow up to 120
                treeCountEl.textContent = Math.min(100, trees);
                sustainScoreEl.textContent = Math.min(100, sustainability);
                roundsLeftEl.textContent = roundsLeft;
                
                // Update progress bars (cap at 100% for visual display)
                treeBarEl.style.width = `${Math.min(100, trees)}%`;
                sustainBarEl.style.width = `${Math.min(100, sustainability)}%`;
                
                // Update colors based on values
                if (trees < 30) {
                    treeBarEl.classList.remove('bg-green-600');
                    treeBarEl.classList.add('bg-red-600');
                } else {
                    treeBarEl.classList.remove('bg-red-600');
                    treeBarEl.classList.add('bg-green-600');
                }
                
                if (sustainability < 30) {
                    sustainBarEl.classList.remove('bg-blue-600');
                    sustainBarEl.classList.add('bg-red-600');
                } else {
                    sustainBarEl.classList.remove('bg-red-600');
                    sustainBarEl.classList.add('bg-blue-600');
                }
            }
            
            function checkGameOver() {
                // If game is already over, don't show results again
                if (gameIsOver) return true;
                
                // Success if both metrics are at or above 100 (can be up to 120 internally)
                if (roundsLeft <= 0 || trees <= 0 || sustainability <= 0 || (trees >= 100 && sustainability >= 100)) {
                    // Mark game as over to prevent multiple results
                    gameIsOver = true;
                    
                    harvestBtnEl.disabled = true;
                    plantBtnEl.disabled = true;
                    
                    // Remove any existing result screens
                    const existingResult = document.getElementById('forestResultsScreen');
                    if (existingResult) {
                        existingResult.remove();
                    }
                    
                    // Show results
                    const resultEl = document.createElement('div');
                    resultEl.className = 'bg-white dark:bg-gray-800 p-4 rounded-lg text-center mt-4 slide-in';
                    resultEl.id = 'forestResultsScreen'; // Add ID to make it easy to reference
                    
                    let message;
                    let success = false;
                    
                    if (trees <= 0) {
                        message = "You've depleted all the trees in the forest!";
                    } else if (sustainability <= 0) {
                        message = "The forest ecosystem has collapsed due to poor management!";
                    } else if (trees >= 100 && sustainability >= 100) {
                        message = "Perfect balance achieved! You've maximized both forest growth and sustainability!";
                        score = 100;
                        success = true;
                    } else if (roundsLeft <= 0) {
                        message = "You ran out of rounds before achieving perfect balance.";
                    }
                    
                    resultEl.innerHTML = `
                        <h3 class="text-xl font-bold mb-2 text-gray-800 dark:text-gray-200">Forest Management ${success ? 'Success' : 'Challenge'}</h3>
                        <p class="mb-2 text-gray-700 dark:text-gray-300">${message}</p>
                        <p class="mb-4 text-gray-700 dark:text-gray-300">Final Score: ${score} points</p>
                        <div class="flex justify-between text-sm mb-4">
                            <span class="text-gray-700 dark:text-gray-300">Reward: <span class="font-bold text-green-600 dark:text-green-400">$${gameState.currentQuest.reward}</span></span>
                            <span class="text-gray-700 dark:text-gray-300">CO₂ Saved: <span class="font-bold text-blue-600 dark:text-blue-400">${gameState.currentQuest.emissionSaved} kg</span></span>
                        </div>
                        ${success ? `
                            <button id="claimReward" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg">
                                Claim Reward
                            </button>
                        ` : `
                            <button id="tryAgain" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg">
                                Try Again
                            </button>
                        `}
                    `;
                    
                    miniGameContentEl.appendChild(resultEl);
                    
                    // Hide the quit button if successful
                    if (success) {
                        quitMiniGameEl.classList.add('hidden');
                        
                        document.getElementById('claimReward').addEventListener('click', () => {
                            completeQuest();
                        });
                    } else {
                        document.getElementById('tryAgain').addEventListener('click', () => {
                            // Reload the mini-game
                            miniGameContentEl.innerHTML = '';
                            loadForestManagementMiniGame();
                        });
                    }
                    
                    return true;
                }
                return false;
            }
            
            harvestBtnEl.addEventListener('click', () => {
                // Harvest trees logic (improved values to make game easier)
                trees = Math.max(0, trees - 3); // Reduced negative impact
                sustainability = Math.min(120, sustainability + 15); // Increased positive impact and allow overflow up to 120
                roundsLeft--;
                
                actionResultEl.textContent = "You harvested mature trees, improving forest sustainability.";
                actionResultEl.className = "text-center mt-4 text-amber-700 dark:text-amber-300";
                actionResultEl.classList.remove('hidden');
                
                updateUI();
                
                if (!checkGameOver()) {
                    // Random event
                    if (Math.random() < 0.3) {
                        const events = [
                            { text: "A storm damaged some trees!", treeChange: -3, sustainChange: 0 },
                            { text: "Local wildlife is thriving!", treeChange: 0, sustainChange: 5 },
                            { text: "Disease affected some young trees!", treeChange: -2, sustainChange: -2 }
                        ];
                        
                        const event = events[Math.floor(Math.random() * events.length)];
                        trees = Math.max(0, Math.min(120, trees + event.treeChange)); // Cap at 120 max
                        sustainability = Math.max(0, Math.min(120, sustainability + event.sustainChange)); // Cap at 120 max
                        
                        setTimeout(() => {
                            actionResultEl.textContent = event.text;
                            actionResultEl.className = "text-center mt-4 text-purple-700 dark:text-purple-300";
                            updateUI();
                            checkGameOver();
                        }, 1000);
                    }
                }
            });
            
            plantBtnEl.addEventListener('click', () => {
                // Plant trees logic (improved values to make game easier)
                trees = Math.min(120, trees + 12); // Increased positive impact and allow overflow up to 120
                sustainability = Math.max(0, sustainability - 3); // Reduced negative impact
                roundsLeft--;
                
                actionResultEl.textContent = "You planted new trees, temporarily reducing sustainability.";
                actionResultEl.className = "text-center mt-4 text-green-700 dark:text-green-300";
                actionResultEl.classList.remove('hidden');
                
                updateUI();
                
                if (!checkGameOver()) {
                    // Random event
                    if (Math.random() < 0.3) {
                        const events = [
                            { text: "A fire broke out in part of the forest!", treeChange: -5, sustainChange: -3 },
                            { text: "Rainfall was higher than expected!", treeChange: 2, sustainChange: 3 },
                            { text: "Tourists visited the forest, leaving trash.", treeChange: 0, sustainChange: -2 }
                        ];
                        
                        const event = events[Math.floor(Math.random() * events.length)];
                        trees = Math.max(0, Math.min(120, trees + event.treeChange)); // Cap at 120 max
                        sustainability = Math.max(0, Math.min(120, sustainability + event.sustainChange)); // Cap at 120 max
                        
                        setTimeout(() => {
                            actionResultEl.textContent = event.text;
                            actionResultEl.className = "text-center mt-4 text-purple-700 dark:text-purple-300";
                            updateUI();
                            checkGameOver();
                        }, 1000);
                    }
                }
            });
            
            // Initial UI update
            updateUI();
        }

        // Industrial mini-games
        function loadPlasticReductionMiniGame() {
            const products = [
                { name: "Plastic Water Bottle", emission: 82, alternatives: ["Reusable Metal Bottle", "Glass Bottle"] },
                { name: "Plastic Shopping Bag", emission: 33, alternatives: ["Cotton Tote Bag", "Paper Bag"] },
                { name: "Plastic Straw", emission: 1.5, alternatives: ["Metal Straw", "Biodegradable Straw"] },
                { name: "Plastic Food Container", emission: 100, alternatives: ["Glass Container", "Stainless Steel Container"] },
                { name: "Disposable Coffee Cup", emission: 60, alternatives: ["Reusable Travel Mug", "Ceramic Mug"] },
                { name: "Plastic Cutlery", emission: 15, alternatives: ["Bamboo Cutlery", "Metal Cutlery"] },
                { name: "Plastic Toothbrush", emission: 30, alternatives: ["Bamboo Toothbrush", "Electric with Replaceable Heads"] },
                { name: "Plastic Wrap", emission: 45, alternatives: ["Beeswax Wrap", "Silicone Food Covers"] }
            ];
            
            let score = 0;
            let currentProductIndex = 0;
            let gameCompleted = false; // Track when game is completed to prevent multiple results
            
            const gameContainer = document.createElement('div');
            gameContainer.innerHTML = `
                <div class="text-center mb-6">
                    <div class="text-xl mb-2 text-gray-800 dark:text-gray-200">Select sustainable alternatives to reduce plastic use</div>
                    <div class="text-2xl mb-2 text-gray-800 dark:text-gray-200">Score: <span id="productScore">0</span></div>
                    <div class="w-full bg-gray-200 rounded-full h-4 mt-2">
                        <div id="progressBar" class="bg-blue-600 h-4 rounded-full" style="width: 0%"></div>
                    </div>
                    <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">Product <span id="currentProductNum">1</span>/<span id="totalProducts">${products.length}</span></div>
                </div>
                
                <div class="text-gray-800 dark:text-gray-200 bg-yellow-100 dark:bg-yellow-900 p-4 rounded-lg mb-4">
                    <p class="font-bold">Instructions:</p>
                    <p>1. For each plastic product shown, select the more sustainable alternative</p>
                    <p>2. Green options earn you points based on how much CO2 they save</p>
                    <p>3. Complete all products to finish the quest</p>
                </div>
                
                <div id="productContainer" class="bg-white dark:bg-gray-700 p-4 rounded-lg mb-4 text-center">
                    <div id="productDisplay" class="text-4xl mb-4">🍶</div>
                    <div id="productName" class="text-xl font-bold mb-2 text-gray-800 dark:text-gray-200"></div>
                    <div id="productEmission" class="text-lg mb-4 text-gray-800 dark:text-gray-200">Carbon Emission: <span></span> g CO₂</div>
                    <div class="text-md mb-4 text-gray-800 dark:text-gray-200">Choose a sustainable alternative:</div>
                    <div id="alternativesContainer" class="grid grid-cols-1 sm:grid-cols-2 gap-4"></div>
                </div>
            `;
            
            miniGameContentEl.appendChild(gameContainer);
            
            const productScoreEl = document.getElementById('productScore');
            const progressBarEl = document.getElementById('progressBar');
            const currentProductNumEl = document.getElementById('currentProductNum');
            const productNameEl = document.getElementById('productName');
            const productEmissionEl = document.getElementById('productEmission').querySelector('span');
            const alternativesContainerEl = document.getElementById('alternativesContainer');
            
            // Display a product
            function displayProduct(index) {
                const product = products[index];
                
                productNameEl.textContent = product.name;
                productEmissionEl.textContent = product.emission;
                currentProductNumEl.textContent = index + 1;
                progressBarEl.style.width = `${(index / products.length) * 100}%`;
                
                // Clear alternatives
                alternativesContainerEl.innerHTML = '';
                
                // Add correct alternatives
                product.alternatives.forEach(alt => {
                    const altButton = document.createElement('button');
                    altButton.className = 'bg-green-100 dark:bg-green-900 hover:bg-green-200 dark:hover:bg-green-800 p-4 rounded-lg text-center transition-colors';
                    altButton.innerHTML = `
                        <div class="text-2xl mb-2">♻️</div>
                        <div class="font-medium text-gray-800 dark:text-gray-200">${alt}</div>
                    `;
                    
                    altButton.addEventListener('click', () => {
                        score += product.emission;
                        productScoreEl.textContent = score;
                        
                        // Show feedback
                        altButton.classList.remove('bg-green-100', 'dark:bg-green-900');
                        altButton.classList.add('bg-green-500', 'text-white');
                        
                        // Move to next product
                        setTimeout(() => {
                            if (currentProductIndex < products.length - 1) {
                                currentProductIndex++;
                                displayProduct(currentProductIndex);
                            } else {
                                if (!gameCompleted) {
                                    gameCompleted = true;
                                    showResults();
                                }
                            }
                        }, 1000);
                    });
                    
                    alternativesContainerEl.appendChild(altButton);
                });
                
                // Add incorrect/less sustainable options
                const otherProducts = products.filter(p => p !== product);
                const randomWrongProduct = otherProducts[Math.floor(Math.random() * otherProducts.length)];
                
                const wrongAltButton = document.createElement('button');
                wrongAltButton.className = 'bg-green-100 dark:bg-green-900 hover:bg-green-200 dark:hover:bg-green-800 p-4 rounded-lg text-center transition-colors';
                wrongAltButton.innerHTML = `
                    <div class="text-2xl mb-2">🗑️</div>
                    <div class="font-medium text-gray-800 dark:text-gray-200">${product.name} (Thinner Plastic)</div>
                `;
                
                wrongAltButton.addEventListener('click', () => {
                    // Show feedback
                    wrongAltButton.classList.remove('bg-green-100', 'dark:bg-green-900');
                    wrongAltButton.classList.add('bg-red-500', 'text-white');
                    
                    // Move to next product
                    setTimeout(() => {
                        if (currentProductIndex < products.length - 1) {
                            currentProductIndex++;
                            displayProduct(currentProductIndex);
                        } else {
                            if (!gameCompleted) {
                                gameCompleted = true;
                                showResults();
                            }
                        }
                    }, 1000);
                });
                
                // Insert at random position
                if (Math.random() > 0.5) {
                    alternativesContainerEl.appendChild(wrongAltButton);
                } else {
                    alternativesContainerEl.prepend(wrongAltButton);
                }
            }
            
            // Show results at the end
            function showResults() {
                // Remove any existing results
                const existingResults = document.getElementById('plasticResultsScreen');
                if (existingResults) {
                    existingResults.remove();
                }
                
                // Show results
                const resultEl = document.createElement('div');
                resultEl.className = 'bg-white dark:bg-gray-800 p-4 rounded-lg text-center mt-4 slide-in';
                resultEl.id = 'plasticResultsScreen'; // Add ID for easy reference
                
                resultEl.innerHTML = `
                    <h3 class="text-xl font-bold mb-2 text-gray-800 dark:text-gray-200">Quest Complete!</h3>
                    <p class="mb-2 text-gray-700 dark:text-gray-300">You reduced plastic use equivalent to ${score}g of CO₂ emissions!</p>
                    <div class="flex justify-between text-sm mb-4">
                        <span class="text-gray-700 dark:text-gray-300">Reward: <span class="font-bold text-green-600 dark:text-green-400">$${gameState.currentQuest.reward}</span></span>
                        <span class="text-gray-700 dark:text-gray-300">CO₂ Saved: <span class="font-bold text-blue-600 dark:text-blue-400">${gameState.currentQuest.emissionSaved} kg</span></span>
                    </div>
                    <button id="claimReward" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg">
                        Claim Reward
                    </button>
                `;
                
                miniGameContentEl.appendChild(resultEl);
                
                // Hide the quit button
                quitMiniGameEl.classList.add('hidden');
                
                document.getElementById('claimReward').addEventListener('click', () => {
                    completeQuest();
                });
            }
            
            // Start the game
            displayProduct(currentProductIndex);
        }
        
        function loadFactoryEmissionsAuditMiniGame() {
            let emissionFixed = 0;
            let problemsFound = 0;
            
            const gameContainer = document.createElement('div');
            gameContainer.innerHTML = `
                <div class="text-center mb-4">
                    <div class="text-xl mb-2 text-gray-800 dark:text-gray-200">Factory Emissions Audit</div>
                    <div class="grid grid-cols-2 gap-4 text-center">
                        <div class="text-gray-800 dark:text-gray-200">Problems Found: <span id="problemsFound">0</span>/8</div>
                        <div class="text-gray-800 dark:text-gray-200">Emissions Fixed: <span id="emissionsFixed">0</span> kg CO₂</div>
                    </div>
                </div>
                
                <div class="text-gray-800 dark:text-gray-200 bg-yellow-100 dark:bg-yellow-900 p-4 rounded-lg mb-4">
                    <p class="font-bold">Instructions:</p>
                    <p>1. Click on the emission sources (colored icons) in the factory</p>
                    <p>2. For each source, click the "Fix This Issue" button</p>
                    <p>3. Find and fix all 8 emission sources to complete the audit</p>
                </div>
                
                <div class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg">
                    <div id="factoryMap" class="relative w-full h-[300px] bg-slate-200 dark:bg-slate-700 rounded-lg overflow-hidden border-2 border-gray-300 dark:border-gray-600">
                        <!-- Factory layout -->
                        <div class="absolute top-1/4 left-1/4 w-1/2 h-1/2 bg-gray-400 dark:bg-gray-600 rounded-lg"></div>
                        <div class="absolute top-1/3 left-1/3 w-1/3 h-1/3 bg-gray-500 dark:bg-gray-500 rounded-lg flex items-center justify-center text-white text-sm">Factory</div>
                        
                        <!-- Emission points with improved visibility -->
                        <div class="emission-point absolute top-[20%] left-[20%] w-10 h-10 flex items-center justify-center cursor-pointer bg-red-200 dark:bg-red-900 rounded-full shadow-lg hover:shadow-xl" data-id="1" data-fixed="false" data-emission="50">
                            🔥
                        </div>
                        <div class="emission-point absolute top-[20%] right-[20%] w-10 h-10 flex items-center justify-center cursor-pointer bg-blue-200 dark:bg-blue-900 rounded-full shadow-lg hover:shadow-xl" data-id="2" data-fixed="false" data-emission="75">
                            💨
                        </div>
                        <div class="emission-point absolute bottom-[20%] left-[20%] w-10 h-10 flex items-center justify-center cursor-pointer bg-green-200 dark:bg-green-900 rounded-full shadow-lg hover:shadow-xl" data-id="3" data-fixed="false" data-emission="30">
                            💧
                        </div>
                        <div class="emission-point absolute bottom-[20%] right-[20%] w-10 h-10 flex items-center justify-center cursor-pointer bg-yellow-200 dark:bg-yellow-900 rounded-full shadow-lg hover:shadow-xl" data-id="4" data-fixed="false" data-emission="60">
                            ⚠️
                        </div>
                        <div class="emission-point absolute top-[50%] left-[10%] w-10 h-10 flex items-center justify-center cursor-pointer bg-gray-200 dark:bg-gray-800 rounded-full shadow-lg hover:shadow-xl" data-id="5" data-fixed="false" data-emission="45">
                            🗑️
                        </div>
                        <div class="emission-point absolute top-[10%] left-[50%] w-10 h-10 flex items-center justify-center cursor-pointer bg-purple-200 dark:bg-purple-900 rounded-full shadow-lg hover:shadow-xl" data-id="6" data-fixed="false" data-emission="90">
                            🏭
                        </div>
                        <div class="emission-point absolute bottom-[10%] right-[33%] w-10 h-10 flex items-center justify-center cursor-pointer bg-indigo-200 dark:bg-indigo-900 rounded-full shadow-lg hover:shadow-xl" data-id="7" data-fixed="false" data-emission="40">
                            ⚡
                        </div>
                        <div class="emission-point absolute top-[67%] right-[10%] w-10 h-10 flex items-center justify-center cursor-pointer bg-pink-200 dark:bg-pink-900 rounded-full shadow-lg hover:shadow-xl" data-id="8" data-fixed="false" data-emission="55">
                            🔋
                        </div>
                    </div>
                    
                    <div id="emissionInfo" class="mt-4 p-4 bg-white dark:bg-gray-700 rounded-lg hidden">
                        <h3 id="emissionTitle" class="text-lg font-bold mb-2 text-gray-800 dark:text-gray-200"></h3>
                        <p id="emissionDescription" class="mb-4 text-gray-700 dark:text-gray-300"></p>
                        <button id="fixEmissionBtn" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg w-full">
                            Fix This Issue
                        </button>
                    </div>
                </div>
            `;
            
            miniGameContentEl.appendChild(gameContainer);
            
            const problemsFoundEl = document.getElementById('problemsFound');
            const emissionsFixedEl = document.getElementById('emissionsFixed');
            const emissionPointsEl = document.querySelectorAll('.emission-point');
            const emissionInfoEl = document.getElementById('emissionInfo');
            const emissionTitleEl = document.getElementById('emissionTitle');
            const emissionDescriptionEl = document.getElementById('emissionDescription');
            const fixEmissionBtnEl = document.getElementById('fixEmissionBtn');
            
            const emissionDescriptions = {
                1: { title: "Excess Heat Waste", description: "Heat is being wasted without recovery systems." },
                2: { title: "Unfiltered Air Emissions", description: "Air pollutants are being released without proper filtration." },
                3: { title: "Water Contamination", description: "Process water is being discharged with contaminants." },
                4: { title: "Chemical Hazard", description: "Improper storage of chemicals is leading to venting." },
                5: { title: "Waste Management", description: "Organic waste is decomposing and producing methane." },
                6: { title: "Smokestack Emissions", description: "The main smokestack lacks carbon capture technology." },
                7: { title: "Energy Inefficiency", description: "Outdated equipment is consuming excess electricity." },
                8: { title: "Battery Disposal", description: "Improper disposal of industrial batteries is causing emissions." }
            };
            
            let selectedEmissionPoint = null;
            
            emissionPointsEl.forEach(point => {
                point.addEventListener('click', () => {
                    if (point.dataset.fixed === 'true') return;
                    
                    // Reset previous selection
                    emissionPointsEl.forEach(p => p.classList.remove('ring-4', 'ring-indigo-600'));
                    
                    // Select this point
                    point.classList.add('ring-4', 'ring-indigo-600');
                    selectedEmissionPoint = point;
                    
                    // Show emission info
                    const pointId = point.dataset.id;
                    const emissionInfo = emissionDescriptions[pointId];
                    
                    emissionTitleEl.textContent = emissionInfo.title;
                    emissionDescriptionEl.textContent = emissionInfo.description;
                    emissionInfoEl.classList.remove('hidden');
                });
            });
            
            fixEmissionBtnEl.addEventListener('click', () => {
                if (!selectedEmissionPoint) return;
                
                const emission = parseInt(selectedEmissionPoint.dataset.emission);
                
                // Mark as fixed
                selectedEmissionPoint.dataset.fixed = 'true';
                selectedEmissionPoint.classList.remove('ring-4', 'ring-indigo-600');
                selectedEmissionPoint.classList.add('bg-green-200', 'dark:bg-green-900', 'rounded-full');
                selectedEmissionPoint.innerHTML = '✅';
                
                // Update counters
                emissionFixed += emission;
                problemsFound++;
                
                problemsFoundEl.textContent = problemsFound;
                emissionsFixedEl.textContent = emissionFixed;
                
                // Hide info
                emissionInfoEl.classList.add('hidden');
                selectedEmissionPoint = null;
                
                // Check if all problems are fixed
                if (problemsFound >= 8) {
                    showCompletion();
                }
            });
            
            function showCompletion() {
                // Show results
                const resultEl = document.createElement('div');
                resultEl.className = 'bg-white dark:bg-gray-800 p-4 rounded-lg text-center mt-4 slide-in';
                resultEl.id = 'factoryResultsScreen'; // Add ID for easy reference
                
                resultEl.innerHTML = `
                    <h3 class="text-xl font-bold mb-2 text-gray-800 dark:text-gray-200">Factory Audit Complete!</h3>
                    <p class="mb-2 text-gray-700 dark:text-gray-300">You identified and fixed all 8 emission sources, reducing ${emissionFixed} kg of CO₂ emissions!</p>
                    <div class="flex justify-between text-sm mb-4">
                        <span class="text-gray-700 dark:text-gray-300">Reward: <span class="font-bold text-green-600 dark:text-green-400">$${gameState.currentQuest.reward}</span></span>
                        <span class="text-gray-700 dark:text-gray-300">CO₂ Saved: <span class="font-bold text-blue-600 dark:text-blue-400">${gameState.currentQuest.emissionSaved} kg</span></span>
                    </div>
                    <button id="claimReward" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg">
                        Claim Reward
                    </button>
                `;
                
                miniGameContentEl.appendChild(resultEl);
                
                // Hide the quit button
                quitMiniGameEl.classList.add('hidden');
                
                document.getElementById('claimReward').addEventListener('click', () => {
                    completeQuest();
                });
            }
        }
        
        function loadRecyclingMasterMiniGame() {
            let score = 0;
            let incorrectItems = 0;
            let timeLeft = 45;
            let gameActive = true;
            
            const recycleBins = [
                { type: 'plastic', icon: '♳', color: 'bg-blue-500' },
                { type: 'paper', icon: '📄', color: 'bg-yellow-500' },
                { type: 'glass', icon: '🍶', color: 'bg-green-500' },
                { type: 'metal', icon: '🥫', color: 'bg-red-500' },
                { type: 'compost', icon: '🍎', color: 'bg-amber-700' }, // Changed from brown to amber for better visibility
                { type: 'landfill', icon: '🗑️', color: 'bg-gray-500' }
            ];
            
            const items = [
                { name: 'Plastic Bottle', type: 'plastic', icon: '🍶' },
                { name: 'Newspaper', type: 'paper', icon: '📰' },
                { name: 'Glass Jar', type: 'glass', icon: '🫙' },
                { name: 'Aluminum Can', type: 'metal', icon: '🥫' },
                { name: 'Banana Peel', type: 'compost', icon: '🍌' },
                { name: 'Styrofoam', type: 'landfill', icon: '📦' },
                { name: 'Plastic Bag', type: 'plastic', icon: '🛍️' },
                { name: 'Cardboard Box', type: 'paper', icon: '📦' },
                { name: 'Wine Bottle', type: 'glass', icon: '🍾' },
                { name: 'Metal Spoon', type: 'metal', icon: '🥄' },
                { name: 'Apple Core', type: 'compost', icon: '🍎' },
                { name: 'Diaper', type: 'landfill', icon: '👶' },
                { name: 'Yogurt Container', type: 'plastic', icon: '🥛' },
                { name: 'Magazine', type: 'paper', icon: '📚' },
                { name: 'Lightbulb', type: 'landfill', icon: '💡' },
                { name: 'Soda Can', type: 'metal', icon: '🥤' },
                { name: 'Eggshells', type: 'compost', icon: '🥚' },
                { name: 'Coffee Cup', type: 'landfill', icon: '☕' }
            ];
            
            const gameContainer = document.createElement('div');
            gameContainer.innerHTML = `
                <div class="text-center mb-4">
                    <div class="text-xl mb-2 text-gray-800 dark:text-gray-200">Sort items into the correct recycling bins!</div>
                    <div class="grid grid-cols-2 md:grid-cols-3 gap-2 text-center">
                        <div class="text-gray-800 dark:text-gray-200">Score: <span id="recycleScore">0</span></div>
                        <div class="text-gray-800 dark:text-gray-200">Time Left: <span id="recycleTimeLeft">${timeLeft}</span>s</div>
                        <div class="text-gray-800 dark:text-gray-200">Errors: <span id="recycleErrors">0</span>/5</div>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-4 mt-2">
                        <div id="recycleTimeBar" class="bg-blue-600 h-4 rounded-full" style="width: 100%"></div>
                    </div>
                </div>
                
                <div class="text-gray-800 dark:text-gray-200 bg-yellow-100 dark:bg-yellow-900 p-4 rounded-lg mb-4">
                    <p class="font-bold">Instructions:</p>
                    <p>1. Click on the bin that matches the waste item shown</p>
                    <p>2. Sort as many items correctly as you can before time runs out</p>
                    <p>3. You can make up to 5 mistakes</p>
                </div>
                
                <div class="mb-4 p-4 bg-amber-100 dark:bg-amber-900 rounded-lg text-center">
                    <div id="currentItem" class="mb-4">
                        <div id="itemIcon" class="text-5xl mb-2"></div>
                        <div id="itemName" class="text-xl font-bold text-gray-800 dark:text-gray-200"></div>
                    </div>
                </div>
                
                <div id="recycleBins" class="grid grid-cols-2 md:grid-cols-3 gap-4">
                    <!-- Recycle bins will be added here -->
                </div>
            `;
            
            miniGameContentEl.appendChild(gameContainer);
            
            const recycleScoreEl = document.getElementById('recycleScore');
            const recycleTimeLeftEl = document.getElementById('recycleTimeLeft');
            const recycleErrorsEl = document.getElementById('recycleErrors');
            const recycleTimeBarEl = document.getElementById('recycleTimeBar');
            const currentItemIconEl = document.getElementById('itemIcon');
            const currentItemNameEl = document.getElementById('itemName');
            const recycleBinsEl = document.getElementById('recycleBins');
            
            let currentItem = null;
            
            // Create recycle bins
            recycleBins.forEach(bin => {
                const binEl = document.createElement('div');
                binEl.className = `recycle-bin ${bin.color} p-4 rounded-lg text-white text-center cursor-pointer transition-transform hover:scale-105`;
                binEl.innerHTML = `
                    <div class="text-4xl mb-2">${bin.icon}</div>
                    <div class="font-bold capitalize">${bin.type}</div>
                `;
                
                binEl.addEventListener('click', () => {
                    if (!gameActive || !currentItem) return;
                    
                    if (currentItem.type === bin.type) {
                        // Correct bin
                        score++;
                        recycleScoreEl.textContent = score;
                        
                        // Visual feedback
                        binEl.classList.add('ring-4', 'ring-green-500');
                        setTimeout(() => {
                            binEl.classList.remove('ring-4', 'ring-green-500');
                            displayNewItem();
                        }, 500);
                    } else {
                        // Wrong bin
                        incorrectItems++;
                        recycleErrorsEl.textContent = incorrectItems;
                        
                        // Visual feedback
                        binEl.classList.add('ring-4', 'ring-red-500');
                        setTimeout(() => {
                            binEl.classList.remove('ring-4', 'ring-red-500');
                            displayNewItem();
                        }, 500);
                        
                        // Check for game over
                        if (incorrectItems >= 5) {
                            endGame();
                        }
                    }
                });
                
                recycleBinsEl.appendChild(binEl);
            });
            
            function displayNewItem() {
                if (!gameActive) return;
                
                // Get random item
                currentItem = items[Math.floor(Math.random() * items.length)];
                
                currentItemIconEl.textContent = currentItem.icon;
                currentItemNameEl.textContent = currentItem.name;
            }
            
            function endGame() {
                gameActive = false;
                clearInterval(timer);
                
                // Show results
                const resultEl = document.createElement('div');
                resultEl.className = 'bg-white dark:bg-gray-800 p-4 rounded-lg text-center mt-4 slide-in';
                resultEl.id = 'recyclingResultsScreen'; // Add ID for easy reference
                
                resultEl.innerHTML = `
                    <h3 class="text-xl font-bold mb-2 text-gray-800 dark:text-gray-200">Recycling Complete!</h3>
                    <p class="mb-2 text-gray-700 dark:text-gray-300">You correctly sorted ${score} items!</p>
                    <div class="flex justify-between text-sm mb-4">
                        <span class="text-gray-700 dark:text-gray-300">Reward: <span class="font-bold text-green-600 dark:text-green-400">$${gameState.currentQuest.reward}</span></span>
                        <span class="text-gray-700 dark:text-gray-300">CO₂ Saved: <span class="font-bold text-blue-600 dark:text-blue-400">${gameState.currentQuest.emissionSaved} kg</span></span>
                    </div>
                    <button id="claimReward" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg">
                        Claim Reward
                    </button>
                `;
                
                miniGameContentEl.appendChild(resultEl);
                
                // Hide the quit button
                quitMiniGameEl.classList.add('hidden');
                
                document.getElementById('claimReward').addEventListener('click', () => {
                    completeQuest();
                });
            }
            
            // Start the game
            displayNewItem();
            
            // Timer
            const timer = setInterval(() => {
                timeLeft--;
                recycleTimeLeftEl.textContent = timeLeft;
                recycleTimeBarEl.style.width = `${(timeLeft / 45) * 100}%`;
                
                if (timeLeft <= 0) {
                    endGame();
                }
            }, 1000);
            
            // Clean up when leaving mini-game
            quitMiniGameEl.addEventListener('click', () => {
                clearInterval(timer);
                gameActive = false;
            }, { once: true });
        }

        // Transportation mini-games
        function loadGreenCommuterMiniGame() {
            const transportOptions = [
                { name: "Walking", icon: "🚶", emission: 0, time: 50, cost: 0 },
                { name: "Bicycle", icon: "🚲", emission: 0, time: 25, cost: 0 },
                { name: "Bus", icon: "🚌", emission: 150, time: 30, cost: 3 },
                { name: "Subway", icon: "🚇", emission: 100, time: 20, cost: 4 },
                { name: "Carpool", icon: "🚗", emission: 175, time: 20, cost: 5 },
                { name: "Taxi", icon: "🚕", emission: 350, time: 15, cost: 20 },
                { name: "Personal Car", icon: "🚗", emission: 400, time: 15, cost: 10 }
            ];
            
            const gameContainer = document.createElement('div');
            gameContainer.innerHTML = `
                <div class="text-center mb-6">
                    <div class="text-xl mb-4 text-gray-800 dark:text-gray-200">Plan your eco-friendly commute to work</div>
                    <div id="routeMap" class="bg-gray-100 dark:bg-gray-800 p-4 rounded-lg mb-4 flex items-center justify-around text-3xl">
                        <div>🏠</div>
                        <div class="text-gray-500">→→→→→</div>
                        <div>🏢</div>
                    </div>
                </div>
                
                <div class="text-gray-800 dark:text-gray-200 bg-yellow-100 dark:bg-yellow-900 p-4 rounded-lg mb-4">
                    <p class="font-bold">Instructions:</p>
                    <p>1. Choose any transportation option by clicking on it</p>
                    <p>2. Review its environmental impact, time, and cost</p>
                    <p>3. Click "Confirm Route" to complete the quest</p>
                    <p class="font-bold">Tip: Low-emission options like walking, bicycling, or public transit are best for the environment!</p>
                </div>
                
                <div id="transportOptionsContainer" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4"></div>
                <div id="selectedRoute" class="mt-6 hidden">
                    <h3 class="text-xl font-bold mb-2 text-gray-800 dark:text-gray-200">Your Route</h3>
                    <div class="bg-white dark:bg-gray-700 p-4 rounded-lg">
                        <div id="routeDetails" class="grid grid-cols-2 gap-4 mb-4">
                            <!-- Route details will be here -->
                        </div>
                        <button id="confirmRoute" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg w-full transform transition-all hover:scale-105">
                            Confirm Route
                        </button>
                    </div>
                </div>
            `;
            
            miniGameContentEl.appendChild(gameContainer);
            
            const transportOptionsContainerEl = document.getElementById('transportOptionsContainer');
            const selectedRouteEl = document.getElementById('selectedRoute');
            const routeDetailsEl = document.getElementById('routeDetails');
            const confirmRouteEl = document.getElementById('confirmRoute');
            
            // Display transport options
            transportOptions.forEach(option => {
                const optionCard = document.createElement('div');
                optionCard.className = 'bg-white dark:bg-gray-700 p-4 rounded-lg cursor-pointer hover:shadow-md transition-shadow';
                optionCard.innerHTML = `
                    <div class="text-4xl mb-2 text-center">${option.icon}</div>
                    <div class="font-bold text-lg mb-2 text-gray-800 dark:text-gray-200">${option.name}</div>
                    <div class="grid grid-cols-2 text-sm gap-2">
                        <div class="text-gray-700 dark:text-gray-300">CO₂: <span class="font-medium ${option.emission === 0 ? 'text-green-600 dark:text-green-400' : ''}">${option.emission}g</span></div>
                        <div class="text-gray-700 dark:text-gray-300">Time: <span class="font-medium">${option.time}min</span></div>
                        <div class="text-gray-700 dark:text-gray-300">Cost: <span class="font-medium">$${option.cost}</span></div>
                    </div>
                `;
                
                optionCard.addEventListener('click', () => {
                    selectTransportOption(option);
                });
                
                transportOptionsContainerEl.appendChild(optionCard);
            });
            
            function selectTransportOption(option) {
                // Update route details
                routeDetailsEl.innerHTML = `
                    <div class="text-center">
                        <div class="text-4xl mb-2">${option.icon}</div>
                        <div class="font-bold text-gray-800 dark:text-gray-200">${option.name}</div>
                    </div>
                    <div>
                        <div class="mb-1 text-gray-700 dark:text-gray-300">CO₂ Emission: <span class="font-bold ${option.emission === 0 ? 'text-green-600 dark:text-green-400' : ''}">${option.emission}g</span></div>
                        <div class="mb-1 text-gray-700 dark:text-gray-300">Travel Time: <span class="font-bold">${option.time} minutes</span></div>
                        <div class="text-gray-700 dark:text-gray-300">Travel Cost: <span class="font-bold">$${option.cost}</span></div>
                    </div>
                `;
                
                // Show selected route section
                selectedRouteEl.classList.remove('hidden');
                
                // Setup confirm button
                confirmRouteEl.onclick = () => {
                    const resultEl = document.createElement('div');
                    resultEl.className = 'bg-white dark:bg-gray-800 p-4 rounded-lg text-center mt-4 slide-in';
                    
                    let evaluationText = '';
                    let co2Saved = 0;
                    
                    // Calculate CO2 saved compared to personal car
                    if (option.name !== "Personal Car") {
                        const carOption = transportOptions.find(o => o.name === "Personal Car");
                        co2Saved = carOption.emission - option.emission;
                    }
                    
                    if (option.emission === 0) {
                        evaluationText = "Excellent choice! Zero emission transportation is the best for the environment.";
                    } else if (option.emission < 200) {
                        evaluationText = "Good choice! Public transportation significantly reduces carbon emissions.";
                    } else {
                        evaluationText = "There are greener options available, but carpooling is better than driving alone.";
                    }
                    
                    resultEl.innerHTML = `
                        <h3 class="text-xl font-bold mb-2 text-gray-800 dark:text-gray-200">Quest Complete!</h3>
                        <p class="mb-4 text-gray-700 dark:text-gray-300">${evaluationText}</p>
                        <p class="mb-2 text-gray-700 dark:text-gray-300">You saved ${co2Saved}g of CO₂ compared to driving alone!</p>
                        <div class="flex justify-between text-sm mb-4">
                            <span class="text-gray-700 dark:text-gray-300">Reward: <span class="font-bold text-green-600 dark:text-green-400">$${gameState.currentQuest.reward}</span></span>
                            <span class="text-gray-700 dark:text-gray-300">CO₂ Saved: <span class="font-bold text-blue-600 dark:text-blue-400">${gameState.currentQuest.emissionSaved} kg</span></span>
                        </div>
                        <button id="claimReward" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg">
                            Claim Reward
                        </button>
                    `;
                    
                    miniGameContentEl.appendChild(resultEl);
                    
                    // Hide the quit button
                    quitMiniGameEl.classList.add('hidden');
                    
                    document.getElementById('claimReward').addEventListener('click', () => {
                        completeQuest();
                    });
                };
            }
        }
        
        function loadPublicTransportPlannerMiniGame() {
            let score = 0;
            let routesCreated = 0;
            
            const gameContainer = document.createElement('div');
            gameContainer.innerHTML = `
                <div class="text-center mb-4">
                    <div class="text-xl mb-2 text-gray-800 dark:text-gray-200">Design efficient bus routes for maximum coverage</div>
                    <div class="grid grid-cols-2 gap-4 text-center">
                        <div class="text-gray-800 dark:text-gray-200">Routes Created: <span id="routesCreated">0</span>/5</div>
                        <div class="text-gray-800 dark:text-gray-200">Ridership Score: <span id="ridershipScore">0</span></div>
                    </div>
                </div>
                
                <div class="text-gray-800 dark:text-gray-200 bg-yellow-100 dark:bg-yellow-900 p-4 rounded-lg mb-4">
                    <p class="font-bold">Instructions:</p>
                    <p>1. Click on two locations to create a bus route between them</p>
                    <p>2. Try to connect high-density areas (darker colored) for more riders</p>
                    <p>3. Create 5 routes to complete the challenge</p>
                </div>
                
                <div class="bg-white dark:bg-gray-700 p-4 rounded-lg">
                    <div id="cityMapContainer" class="relative w-full h-[300px] bg-blue-100 dark:bg-blue-900 rounded-lg overflow-hidden">
                        <!-- City map with locations -->
                        <div class="text-center text-gray-800 dark:text-gray-200 pt-2">Click on two locations to create a bus route</div>
                        <div id="routeLines" class="absolute inset-0 z-10 pointer-events-none"></div>
                        
                        <!-- Location points -->
                        <div class="location-point absolute top-[20%] left-[30%] w-12 h-12 bg-red-400 dark:bg-red-600 rounded-full flex items-center justify-center cursor-pointer hover:ring-4 hover:ring-blue-500 shadow-lg" data-id="1" data-type="residential" data-density="high">
                            🏘️
                        </div>
                        <div class="location-point absolute top-[25%] left-[70%] w-12 h-12 bg-blue-400 dark:bg-blue-600 rounded-full flex items-center justify-center cursor-pointer hover:ring-4 hover:ring-blue-500 shadow-lg" data-id="2" data-type="office" data-density="high">
                            🏢
                        </div>
                        <div class="location-point absolute top-[70%] left-[20%] w-12 h-12 bg-yellow-400 dark:bg-yellow-600 rounded-full flex items-center justify-center cursor-pointer hover:ring-4 hover:ring-blue-500 shadow-lg" data-id="3" data-type="shopping" data-density="medium">
                            🛍️
                        </div>
                        <div class="location-point absolute top-[60%] left-[80%] w-12 h-12 bg-purple-400 dark:bg-purple-600 rounded-full flex items-center justify-center cursor-pointer hover:ring-4 hover:ring-blue-500 shadow-lg" data-id="4" data-type="entertainment" data-density="medium">
                            🎭
                        </div>
                        <div class="location-point absolute top-[40%] left-[50%] w-12 h-12 bg-green-400 dark:bg-green-600 rounded-full flex items-center justify-center cursor-pointer hover:ring-4 hover:ring-blue-500 shadow-lg" data-id="5" data-type="park" data-density="low">
                            🌳
                        </div>
                        <div class="location-point absolute top-[80%] left-[50%] w-12 h-12 bg-indigo-400 dark:bg-indigo-600 rounded-full flex items-center justify-center cursor-pointer hover:ring-4 hover:ring-blue-500 shadow-lg" data-id="6" data-type="school" data-density="high">
                            🏫
                        </div>
                        <div class="location-point absolute top-[10%] left-[10%] w-12 h-12 bg-pink-400 dark:bg-pink-600 rounded-full flex items-center justify-center cursor-pointer hover:ring-4 hover:ring-blue-500 shadow-lg" data-id="7" data-type="hospital" data-density="medium">
                            🏥
                        </div>
                    </div>
                    
                    <div class="mt-4" id="routeInfo">
                        <div class="text-gray-800 dark:text-gray-200 text-center">
                            Select locations to create bus routes
                        </div>
                    </div>
                </div>
            `;
            
            miniGameContentEl.appendChild(gameContainer);
            
            const routesCreatedEl = document.getElementById('routesCreated');
            const ridershipScoreEl = document.getElementById('ridershipScore');
            const routeLinesEl = document.getElementById('routeLines');
            const routeInfoEl = document.getElementById('routeInfo');
            const locationPointsEl = document.querySelectorAll('.location-point');
            
            let selectedPoint = null;
            const createdRoutes = [];
            const locationDensityValues = {
                high: 100,
                medium: 60,
                low: 30
            };
            
            // Handle location selection
            locationPointsEl.forEach(point => {
                point.addEventListener('click', () => {
                    if (routesCreated >= 5) return;
                    
                    if (!selectedPoint) {
                        // First point selected
                        selectedPoint = point;
                        point.classList.add('ring-4', 'ring-blue-500');
                        routeInfoEl.innerHTML = `<div class="text-gray-800 dark:text-gray-200 text-center">Now select a destination</div>`;
                    } else if (selectedPoint !== point) {
                        // Second point selected, create route
                        const pointId1 = parseInt(selectedPoint.dataset.id);
                        const pointId2 = parseInt(point.dataset.id);
                        
                        // Check if route already exists
                        const routeExists = createdRoutes.some(
                            route => (route.from === pointId1 && route.to === pointId2) || 
                                    (route.from === pointId2 && route.to === pointId1)
                        );
                        
                        if (!routeExists) {
                            createRoute(selectedPoint, point);
                            
                            // Calculate ridership based on density
                            const density1 = selectedPoint.dataset.density;
                            const density2 = point.dataset.density;
                            const ridership = locationDensityValues[density1] + locationDensityValues[density2];
                            
                            // Update score
                            score += ridership;
                            routesCreated++;
                            
                            // Update UI
                            routesCreatedEl.textContent = routesCreated;
                            ridershipScoreEl.textContent = score;
                            
                            // Add to created routes
                            createdRoutes.push({ from: pointId1, to: pointId2 });
                            
                            // Check if all routes are created
                            if (routesCreated >= 5) {
                                showCompletion();
                            }
                        } else {
                            routeInfoEl.innerHTML = `<div class="text-red-600 dark:text-red-400 text-center">This route already exists! Select different locations.</div>`;
                        }
                        
                        // Deselect first point
                        selectedPoint.classList.remove('ring-4', 'ring-blue-500');
                        selectedPoint = null;
                    }
                });
            });
            
            function createRoute(point1, point2) {
                const rect1 = point1.getBoundingClientRect();
                const rect2 = point2.getBoundingClientRect();
                const containerRect = routeLinesEl.getBoundingClientRect();
                
                const x1 = rect1.left + rect1.width / 2 - containerRect.left;
                const y1 = rect1.top + rect1.height / 2 - containerRect.top;
                const x2 = rect2.left + rect2.width / 2 - containerRect.left;
                const y2 = rect2.top + rect2.height / 2 - containerRect.top;
                
                // Create a line using SVG for better visibility
                const svgNS = "http://www.w3.org/2000/svg";
                const svg = document.createElementNS(svgNS, "svg");
                svg.setAttribute("width", "100%");
                svg.setAttribute("height", "100%");
                svg.style.position = "absolute";
                svg.style.top = "0";
                svg.style.left = "0";
                svg.style.pointerEvents = "none";
                
                const line = document.createElementNS(svgNS, "line");
                line.setAttribute("x1", x1);
                line.setAttribute("y1", y1);
                line.setAttribute("x2", x2);
                line.setAttribute("y2", y2);
                line.setAttribute("stroke", "#4F46E5");
                line.setAttribute("stroke-width", "5");
                line.setAttribute("stroke-dasharray", "10,5");
                
                svg.appendChild(line);
                routeLinesEl.appendChild(svg);
                
                // Show route information
                routeInfoEl.innerHTML = `
                    <div class="text-green-600 dark:text-green-400 text-center">
                        Route created! (${routesCreated + 1}/5)
                    </div>
                `;
            }
            
            function showCompletion() {
                // Show results
                const resultEl = document.createElement('div');
                resultEl.className = 'bg-white dark:bg-gray-800 p-4 rounded-lg text-center mt-4 slide-in';
                
                resultEl.innerHTML = `
                    <h3 class="text-xl font-bold mb-2 text-gray-800 dark:text-gray-200">Bus Route Planning Complete!</h3>
                    <p class="mb-2 text-gray-700 dark:text-gray-300">You created 5 efficient bus routes with a total ridership score of ${score}!</p>
                    <p class="mb-4 text-gray-700 dark:text-gray-300">These routes will help reduce car usage and carbon emissions in the city.</p>
                    <div class="flex justify-between text-sm mb-4">
                        <span class="text-gray-700 dark:text-gray-300">Reward: <span class="font-bold text-green-600 dark:text-green-400">$${gameState.currentQuest.reward}</span></span>
                        <span class="text-gray-700 dark:text-gray-300">CO₂ Saved: <span class="font-bold text-blue-600 dark:text-blue-400">${gameState.currentQuest.emissionSaved} kg</span></span>
                    </div>
                    <button id="claimReward" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg">
                        Claim Reward
                    </button>
                `;
                
                miniGameContentEl.appendChild(resultEl);
                
                // Hide the quit button
                quitMiniGameEl.classList.add('hidden');
                
                document.getElementById('claimReward').addEventListener('click', () => {
                    completeQuest();
                });
            }
        }
        
        function loadBikePathBuilderMiniGame() {
            let score = 0;
            let connectedAreas = 0;
            
            const gameContainer = document.createElement('div');
            gameContainer.innerHTML = `
                <div class="text-center mb-4">
                    <div class="text-xl mb-2 text-gray-800 dark:text-gray-200">Design an efficient bike path network</div>
                    <div class="grid grid-cols-2 gap-4 text-center">
                        <div class="text-gray-800 dark:text-gray-200">Connected Areas: <span id="connectedAreas">0</span>/8</div>
                        <div class="text-gray-800 dark:text-gray-200">Efficiency Score: <span id="efficiencyScore">0</span></div>
                    </div>
                </div>
                
                <div class="text-gray-800 dark:text-gray-200 bg-yellow-100 dark:bg-yellow-900 p-4 rounded-lg mb-4">
                    <p class="font-bold">Instructions:</p>
                    <p>1. Click on one area, then click on another to create a bike path between them</p>
                    <p>2. Use your 12 available path segments to connect as many areas as possible</p>
                    <p>3. When finished, click "Check Network" to evaluate your design</p>
                    <p>4. Aim to connect at least 7 areas for the best score</p>
                </div>
                
                <div class="bg-green-100 dark:bg-green-900 p-4 rounded-lg">
                    <div id="cityMap" class="relative w-full h-[350px] bg-white dark:bg-gray-700 rounded-lg">
                        <!-- City map will be created dynamically -->
                    </div>
                    
                    <div class="mt-4 flex justify-between">
                        <div class="text-gray-800 dark:text-gray-200">
                            <span class="font-bold">Remaining Path Segments:</span>
                            <span id="remainingPaths">12</span>
                        </div>
                        <button id="checkNetwork" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg pulse font-bold animate-pulse transform transition-transform hover:scale-105" disabled>
                            Check Network ✓
                        </button>
                    </div>
                </div>
            `;
            
            miniGameContentEl.appendChild(gameContainer);
            
            const connectedAreasEl = document.getElementById('connectedAreas');
            const efficiencyScoreEl = document.getElementById('efficiencyScore');
            const cityMapEl = document.getElementById('cityMap');
            const remainingPathsEl = document.getElementById('remainingPaths');
            const checkNetworkEl = document.getElementById('checkNetwork');
            
            // City areas
            const areas = [
                { id: 1, name: "Residential 1", x: 20, y: 20, type: "residential" },
                { id: 2, name: "Office Park", x: 80, y: 20, type: "office" },
                { id: 3, name: "Shopping Mall", x: 20, y: 80, type: "shopping" },
                { id: 4, name: "City Center", x: 80, y: 80, type: "center" },
                { id: 5, name: "School", x: 50, y: 35, type: "school" },
                { id: 6, name: "Park", x: 35, y: 50, type: "park" },
                { id: 7, name: "Residential 2", x: 65, y: 50, type: "residential" },
                { id: 8, name: "Train Station", x: 50, y: 65, type: "station" }
            ];
            
            // Icons for each area type
            const areaIcons = {
                residential: "🏘️",
                office: "🏢",
                shopping: "🛍️",
                center: "🏙️",
                school: "🏫",
                park: "🌳",
                station: "🚉"
            };
            
            // Initialize paths
            let remainingPaths = 12;
            let pathSegments = [];
            
            // Create city areas
            areas.forEach(area => {
                const areaEl = document.createElement('div');
                areaEl.className = 'absolute w-12 h-12 bg-gray-100 dark:bg-gray-600 rounded-full flex items-center justify-center flex-col area-node';
                areaEl.style.left = `${area.x}%`;
                areaEl.style.top = `${area.y}%`;
                areaEl.style.transform = 'translate(-50%, -50%)';
                areaEl.dataset.id = area.id;
                
                areaEl.innerHTML = `
                    <div class="text-2xl">${areaIcons[area.type]}</div>
                    <div class="text-xs font-bold leading-tight text-gray-800 dark:text-gray-200">${area.name}</div>
                `;
                
                cityMapEl.appendChild(areaEl);
            });
            
            // Add click events for path creation
            const areaNodes = document.querySelectorAll('.area-node');
            let selectedNode = null;
            
            areaNodes.forEach(node => {
                node.addEventListener('click', () => {
                    if (remainingPaths <= 0) return;
                    
                    if (!selectedNode) {
                        // First node selected
                        selectedNode = node;
                        node.classList.add('ring-2', 'ring-indigo-600');
                    } else if (selectedNode !== node) {
                        // Second node selected, create path
                        const node1Id = parseInt(selectedNode.dataset.id);
                        const node2Id = parseInt(node.dataset.id);
                        
                        // Check if path already exists
                        const pathExists = pathSegments.some(
                            p => (p.from === node1Id && p.to === node2Id) || 
                                (p.from === node2Id && p.to === node1Id)
                        );
                        
                        if (!pathExists) {
                            createPath(selectedNode, node);
                            remainingPaths--;
                            remainingPathsEl.textContent = remainingPaths;
                            
                            // Add to path segments
                            pathSegments.push({ from: node1Id, to: node2Id });
                            
                            // Enable check network button if we've used at least 8 path segments
                            if (pathSegments.length >= 8) {
                                checkNetworkEl.disabled = false;
                            }
                        }
                        
                        // Deselect
                        selectedNode.classList.remove('ring-2', 'ring-indigo-600');
                        selectedNode = null;
                    } else {
                        // Same node clicked again, deselect
                        node.classList.remove('ring-2', 'ring-indigo-600');
                        selectedNode = null;
                    }
                });
            });
            
            function createPath(node1, node2) {
                // Get positions of both nodes
                const rect1 = node1.getBoundingClientRect();
                const rect2 = node2.getBoundingClientRect();
                const mapRect = cityMapEl.getBoundingClientRect();
                
                // Calculate positions relative to the map
                const x1 = rect1.left + rect1.width/2 - mapRect.left;
                const y1 = rect1.top + rect1.height/2 - mapRect.top;
                const x2 = rect2.left + rect2.width/2 - mapRect.left;
                const y2 = rect2.top + rect2.height/2 - mapRect.top;
                
                // Create SVG path for better visibility
                const svgns = "http://www.w3.org/2000/svg";
                let svg = cityMapEl.querySelector('svg');
                
                // Create SVG element if it doesn't exist
                if (!svg) {
                    svg = document.createElementNS(svgns, "svg");
                    svg.setAttribute("width", "100%");
                    svg.setAttribute("height", "100%");
                    svg.style.position = "absolute";
                    svg.style.top = "0";
                    svg.style.left = "0";
                    svg.style.pointerEvents = "none";
                    svg.style.zIndex = "10";
                    cityMapEl.appendChild(svg);
                }
                
                // Create path line
                const path = document.createElementNS(svgns, "line");
                path.setAttribute("x1", x1);
                path.setAttribute("y1", y1);
                path.setAttribute("x2", x2);
                path.setAttribute("y2", y2);
                path.setAttribute("stroke", "#4F46E5");
                path.setAttribute("stroke-width", "6");
                path.setAttribute("class", "path-segment");
                
                svg.appendChild(path);
            }
            
            // Check network functionality
            checkNetworkEl.addEventListener('click', () => {
                // Create adjacency list for network
                const adjacencyList = {};
                areas.forEach(area => {
                    adjacencyList[area.id] = [];
                });
                
                pathSegments.forEach(segment => {
                    adjacencyList[segment.from].push(segment.to);
                    adjacencyList[segment.to].push(segment.from);
                });
                
                // Count connected areas using BFS
                const visited = new Set();
                
                function bfs(startNode) {
                    const queue = [startNode];
                    visited.add(startNode);
                    
                    while (queue.length > 0) {
                        const currentNode = queue.shift();
                        
                        adjacencyList[currentNode].forEach(neighbor => {
                            if (!visited.has(neighbor)) {
                                visited.add(neighbor);
                                queue.push(neighbor);
                            }
                        });
                    }
                }
                
                // Start BFS from node 1
                bfs(1);
                
                // Count connected areas
                connectedAreas = visited.size;
                connectedAreasEl.textContent = connectedAreas;
                
                // Calculate efficiency score
                const maxConnections = areas.length * (areas.length - 1) / 2; // Maximum possible connections
                const efficiency = Math.round((connectedAreas / pathSegments.length) * 100);
                efficiencyScoreEl.textContent = efficiency;
                
                // Show results
                showCompletion(connectedAreas, efficiency);
            });
            
            function showCompletion(connected, efficiency) {
                // Calculate score based on connected areas and efficiency
                score = connected * 10 + Math.floor(efficiency / 10);
                
                // Show results
                const resultEl = document.createElement('div');
                resultEl.className = 'bg-white dark:bg-gray-800 p-4 rounded-lg text-center mt-4 slide-in';
                resultEl.id = 'bikePathResultsScreen'; // Add ID for easy reference
                
                let message = "";
                if (connected >= 7) {
                    message = "Great job! Your bike network connects most of the city.";
                } else if (connected >= 5) {
                    message = "Good effort! Your network connects several key areas.";
                } else {
                    message = "Your network needs improvement to connect more areas.";
                }
                
                resultEl.innerHTML = `
                    <h3 class="text-xl font-bold mb-2 text-gray-800 dark:text-gray-200">Bike Network Evaluated</h3>
                    <p class="mb-2 text-gray-700 dark:text-gray-300">${message}</p>
                    <div class="grid grid-cols-2 gap-4 text-center mb-4">
                        <div class="text-gray-700 dark:text-gray-300">Connected Areas: <span class="font-bold">${connected}/8</span></div>
                        <div class="text-gray-700 dark:text-gray-300">Efficiency Score: <span class="font-bold">${efficiency}</span></div>
                    </div>
                    <div class="flex justify-between text-sm mb-4">
                        <span class="text-gray-700 dark:text-gray-300">Reward: <span class="font-bold text-green-600 dark:text-green-400">$${gameState.currentQuest.reward}</span></span>
                        <span class="text-gray-700 dark:text-gray-300">CO₂ Saved: <span class="font-bold text-blue-600 dark:text-blue-400">${gameState.currentQuest.emissionSaved} kg</span></span>
                    </div>
                    <button id="claimReward" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg">
                        Claim Reward
                    </button>
                `;
                
                miniGameContentEl.appendChild(resultEl);
                
                // Hide the quit button
                quitMiniGameEl.classList.add('hidden');
                
                document.getElementById('claimReward').addEventListener('click', () => {
                    completeQuest();
                });
            }
        }
        
        // Complete a quest
        function completeQuest() {
            if (!gameState.currentQuest) return;
            
            // Find the quest and mark it as completed
            const category = gameState.categories[gameState.currentCategory];
            const quest = category.quests.find(q => q.id === gameState.currentQuest.id);
            
            if (quest && !quest.completed) {
                quest.completed = true;
                category.completedQuests++;
                
                // Update player balance
                gameState.balance += quest.reward;
                updateBalance();
                
                // Update emissions saved
                gameState.emissionsSaved += quest.emissionSaved;
                
                // Update cylinders
                updateCylinders();
                
                // Check for first quest achievement if this was their first quest
                if (!achievements.find(a => a.id === 'firstQuest').unlocked) {
                    checkAchievement('firstQuest');
                }
                
                // Check for category achievements and other quest-related achievements
                checkQuestAchievements();
                
                // Add chat message about quest completion
                addMessage('global', 'EcoGuide', `${userSession.username} just completed "${quest.title}" and saved ${quest.emissionSaved} kg of CO2!`, false);
                highlightChatTab('global');
                
                // Show notification
                notificationSystem.success(`
                    <div class="font-bold">Quest Complete!</div>
                    <div>Reward: $${quest.reward} | CO₂ Saved: ${quest.emissionSaved} kg</div>
                `);
                
                // Check if all categories have at least 3 completed quests
                if (
                    gameState.categories.wildlife.completedQuests >= 3 &&
                    gameState.categories.industrial.completedQuests >= 3 &&
                    gameState.categories.transportation.completedQuests >= 3
                ) {
                    // Show congratulations screen
                    totalEmissionsSavedEl.textContent = gameState.emissionsSaved;
                    hideAllScreens();
                    congratsScreenEl.classList.remove('hidden');
                    congratsScreenEl.classList.add('fade-in');
                } else {
                    // Return to category screen
                    showCategoryQuests(gameState.currentCategory);
                }
            }
        }
        
        // Hide all screens
        function hideAllScreens() {
            welcomeScreenEl.classList.add('hidden');
            categoryScreenEl.classList.add('hidden');
            miniGameScreenEl.classList.add('hidden');
            congratsScreenEl.classList.add('hidden');
            inventoryScreenEl.classList.add('hidden');
            achievementsScreenEl.classList.add('hidden');
        }
        
        // Shop functionality
        document.querySelectorAll('.shop-buy-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const itemId = btn.dataset.id;
                const cost = parseInt(btn.dataset.cost);
                const emission = parseInt(btn.dataset.emission);
                
                if (gameState.balance >= cost && !gameState.shopItems[itemId].purchased) {
                    // Purchase item
                    gameState.balance -= cost;
                    gameState.emissionsSaved += emission;
                    gameState.shopItems[itemId].purchased = true;
                    
                    // Update UI
                    updateBalance();
                    
                    // Update button
                    btn.textContent = "Purchased";
                    btn.disabled = true;
                    btn.classList.add('opacity-50', 'cursor-not-allowed');
                    btn.classList.remove('bg-indigo-600', 'hover:bg-indigo-700');
                    btn.classList.add('bg-gray-500');
                    
                    // Update parent container
                    btn.closest('.shop-item').classList.add('ring-2', 'ring-green-500');
                    
                    // Add message to chat
                    addMessage('global', 'EcoSystem', `${userSession.username} just purchased a ${itemId === 'solarPanel' ? 'Solar Panel Array' : itemId === 'airFilter' ? 'Air Filter System' : itemId}!`, false);
                    highlightChatTab('global');
                    
                    // Check shop achievement
                    checkAchievement('shopaholic');
                    
                    // Check emissions achievement
                    checkAchievement('emissionsFighter');
                    
                    // Show notification
                    notificationSystem.success(`
                        <div class="font-bold">Item Purchased!</div>
                        <div>You saved ${emission} kg of CO₂ emissions.</div>
                    `);
                } else if (gameState.shopItems[itemId].purchased) {
                    // Already purchased
                    notificationSystem.info(`You've already purchased this item!`);
                } else {
                    // Not enough money
                    notificationSystem.error(`
                        <div class="font-bold">Not Enough Money</div>
                        <div>You need $${cost} but have $${gameState.balance}.</div>
                    `);
                }
            });
        });
        
        // Event listeners
        wildlifeBtnEl.addEventListener('click', () => showCategoryQuests('wildlife'));
        industrialBtnEl.addEventListener('click', () => showCategoryQuests('industrial'));
        transportationBtnEl.addEventListener('click', () => showCategoryQuests('transportation'));
        
        backToHomeEl.addEventListener('click', () => {
            hideAllScreens();
            welcomeScreenEl.classList.remove('hidden');
            welcomeScreenEl.classList.add('fade-in');
        });
        
        quitMiniGameEl.addEventListener('click', () => {
            showCategoryQuests(gameState.currentCategory);
        });
        
        // Modified restart function to preserve user data
        restartGameEl.addEventListener('click', () => {
            // Only reset the quests and game state, NOT the user login info
            Object.keys(gameState.categories).forEach(categoryKey => {
                const category = gameState.categories[categoryKey];
                category.completedQuests = 0;
                category.quests.forEach(quest => {
                    quest.completed = false;
                });
            });
            
            // Reset game balance to starting amount
            gameState.balance = 1000;
            
            // Reset emissions saved
            gameState.emissionsSaved = 0;
            
            // Reset shop items
            Object.keys(gameState.shopItems).forEach(itemKey => {
                gameState.shopItems[itemKey].purchased = false;
            });
            
            // Reset achievements
            achievements.forEach(achievement => {
                achievement.unlocked = false;
                achievement.progress = 0;
            });
            
            // Update UI
            updateBalance();
            updateCylinders();
            
            // Show welcome screen
            hideAllScreens();
            welcomeScreenEl.classList.remove('hidden');
            welcomeScreenEl.classList.add('fade-in');
            
            // Show notification
            notificationSystem.success(`Game restarted! Your quests have been reset but your account data is preserved.`);
        });
        
        // Chat System 
        const chatContainerEl = document.getElementById('chatContainer');
        const chatHeaderEl = document.getElementById('chatHeader');
        const chatMinimizeBtn = document.getElementById('chatMinimizeBtn');
        const chatTabsEl = document.querySelectorAll('.chat-tab');
        const chatContentsEl = document.querySelectorAll('.chat-content');
        const globalChatInputEl = document.getElementById('globalChatInput');
        const globalChatSendEl = document.getElementById('globalChatSend');
        const aiChatInputEl = document.getElementById('aiChatInput');
        const aiChatSendEl = document.getElementById('aiChatSend');
        const chatToggleBtn = document.getElementById('chatToggleBtn');
        const globalChatMessagesEl = document.getElementById('globalChatMessages');
        const aiChatMessagesEl = document.getElementById('aiChatMessages');
        const chatBadgeEl = document.getElementById('chatBadge');
        
        // Virtual players for global chat
        const virtualPlayers = [
            { name: 'EcoEnthusiast', color: 'bg-green-500' },
            { name: 'TreeHugger42', color: 'bg-yellow-500' },
            { name: 'OceanGuardian', color: 'bg-blue-500' },
            { name: 'EcoSystem', color: 'bg-purple-500', isSystem: true },
            { name: 'EcoGuide', color: 'bg-red-500', isSystem: true }
        ];
        
        // Virtual player messages
        const virtualMessages = [
            "Just completed the Tree Planting quest! Feels good to make a difference 🌳",
            "Anyone know which transportation option gives the most CO2 savings?",
            "Got all wildlife quests done. The ecosystem protection one was my favorite!",
            "Just invested in a Solar Panel Array. Expensive but worth it for the environment!",
            "The Factory Emissions Audit quest is pretty educational. Learned a lot about pollution sources.",
            "Hey, did you know Hong Kong produces over 20 million tons of CO2 annually?",
            "I love how the recycling mini-game teaches proper waste sorting!",
            "Anyone else find the Forest Management quest challenging? Took me a few tries.",
            "Bike Path Builder was fun! Made me think about urban planning differently.",
            "Just hit $2000 in my balance. Time to go shopping in the eco store!",
            "Has anyone managed to save over 300kg of CO2 yet?",
            "I'm trying to get all achievements. The 'Climate Champion' one is tough!",
            "The AI assistant gave me some great tips about reducing food waste."
        ];
        
        // Toggle chat visibility
        chatHeaderEl.addEventListener('click', (e) => {
            if (e.target === chatMinimizeBtn || e.target.closest('#chatMinimizeBtn')) {
                // Allow the minimize button to work
                chatContainerEl.classList.toggle('open');
                return;
            }
            
            chatContainerEl.classList.toggle('open');
        });
        
        // Toggle chat button
        chatToggleBtn.addEventListener('click', () => {
            chatContainerEl.classList.toggle('open');
            chatBadgeEl.style.opacity = '0';
        });
        
        // Switch between chat tabs
        chatTabsEl.forEach(tab => {
            tab.addEventListener('click', () => {
                const tabName = tab.dataset.tab;
                
                // Update active tab
                chatTabsEl.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                
                // Update active content
                chatContentsEl.forEach(content => content.classList.remove('active'));
                document.getElementById(`${tabName}ChatContent`).classList.add('active');
                
                // Clear badge for this tab
                document.getElementById(`${tabName}ChatBadge`).style.display = 'none';
            });
        });
        
        // Send message in global chat
        globalChatSendEl.addEventListener('click', () => {
            const message = globalChatInputEl.value.trim();
            if (message) {
                addMessage('global', userSession.username, message, true);
                globalChatInputEl.value = '';
                
                // Trigger virtual player response after a delay
                setTimeout(() => {
                    if (Math.random() < 0.7) { // 70% chance of response
                        const player = virtualPlayers[Math.floor(Math.random() * (virtualPlayers.length - 2))]; // Don't use system accounts for responses
                        const playerMsg = virtualMessages[Math.floor(Math.random() * virtualMessages.length)];
                        addMessage('global', player.name, playerMsg, false);
                        
                        if (!chatContainerEl.classList.contains('open')) {
                            highlightChatTab('global');
                        }
                    }
                }, 2000 + Math.random() * 3000);
            }
        });
        
        // Send on Enter key
        globalChatInputEl.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                globalChatSendEl.click();
            }
        });
        
        // Send message to AI
        aiChatSendEl.addEventListener('click', async () => {
            const message = aiChatInputEl.value.trim();
            if (message) {
                // Show user message
                addMessage('ai', userSession.username, message, true);
                
                // Clear input
                aiChatInputEl.value = '';
                
                // Show typing indicator
                const typingContainer = document.createElement('div');
                typingContainer.className = 'ai-typing';
                typingContainer.innerHTML = `
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                `;
                aiChatMessagesEl.appendChild(typingContainer);
                aiChatMessagesEl.scrollTop = aiChatMessagesEl.scrollHeight;
                
                // Disable send button while processing
                aiChatSendEl.disabled = true;
                
                try {
                    // Register handler for Claude's response
                    const handlerId = `ai-response-${Date.now()}`;
                    
                    window.Poe.registerHandler(handlerId, (result) => {
                        // Remove typing indicator once we get the first response
                        typingContainer.remove();
                        
                        const msg = result.responses[0];
                        
                        if (msg.status === "error") {
                            addMessage('ai', 'Eco AI', `Sorry, I encountered an error: ${msg.statusText || 'Unknown error'}`, false, true);
                        } else if (msg.status === "incomplete" || msg.status === "complete") {
                            // Get container for this message or create new if none exists
                            let msgContainer = document.getElementById(`ai-msg-${msg.messageId}`);
                            
                            if (!msgContainer) {
                                // Create new message container
                                const messageDiv = document.createElement('div');
                                messageDiv.className = 'message ai';
                                
                                const messageHeader = document.createElement('div');
                                messageHeader.className = 'message-header';
                                
                                const messageSender = document.createElement('div');
                                messageSender.className = 'message-sender';
                                messageSender.textContent = 'Eco AI';
                                
                                const messageTime = document.createElement('div');
                                messageTime.className = 'message-time';
                                messageTime.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                                
                                const messageContent = document.createElement('div');
                                messageContent.className = 'message-content ai-response';
                                messageContent.id = `ai-msg-${msg.messageId}`;
                                
                                messageHeader.appendChild(messageSender);
                                messageHeader.appendChild(messageTime);
                                messageDiv.appendChild(messageHeader);
                                messageDiv.appendChild(messageContent);
                                
                                aiChatMessagesEl.appendChild(messageDiv);
                                
                                msgContainer = messageContent;
                            }
                            
                            // Update message content with marked.js for Markdown
                            msgContainer.innerHTML = marked.parse(msg.content);
                            
                            // Scroll to bottom
                            aiChatMessagesEl.scrollTop = aiChatMessagesEl.scrollHeight;
                        }
                    });
                    
                    // Prepare query with food focus if about food
                    let query = message;
                    if (message.toLowerCase().includes('food') || 
                        message.toLowerCase().includes('eat') || 
                        message.toLowerCase().includes('diet') || 
                        message.toLowerCase().includes('meal') ||
                        message.toLowerCase().includes('carbon')) {
                        
                        query = `${message}\n\nPlease include specific carbon footprint data for foods if this question is about food emissions. Use clear, concise language and include practical sustainability tips.`;
                    } else {
                        query = `${message}\n\nPlease provide practical sustainability tips related to this question. If relevant, include information about carbon footprint and environmental impact.`;
                    }
                    
                    // Send message to Claude
                    await window.Poe.sendUserMessage(
                        `@Claude-3.7-Sonnet ${query}`,
                        {
                            handler: handlerId, 
                            stream: true,
                            openChat: false
                        }
                    );
                } catch (error) {
                    typingContainer.remove();
                    addMessage('ai', 'Eco AI', `Sorry, I couldn't process your request: ${error.message}`, false, true);
                } finally {
                    // Re-enable send button
                    aiChatSendEl.disabled = false;
                }
            }
        });
        
        // Send on Enter key for AI chat
        aiChatInputEl.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !aiChatSendEl.disabled) {
                aiChatSendEl.click();
            }
        });
        
        // Add a message to a chat tab
        function addMessage(tab, sender, content, isSelf = false, isError = false) {
            const messageContainer = tab === 'global' ? globalChatMessagesEl : aiChatMessagesEl;
            
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isSelf ? 'self' : ''} ${isError ? 'error' : ''}`;
            
            const messageHeader = document.createElement('div');
            messageHeader.className = 'message-header';
            
            const senderElement = document.createElement('div');
            senderElement.className = 'message-sender';
            
            // Find virtual player color
            if (!isSelf) {
                const player = virtualPlayers.find(p => p.name === sender);
                if (player) {
                    senderElement.classList.add(player.color, 'text-white', 'px-1', 'rounded');
                }
            }
            
            senderElement.textContent = sender;
            
            const timeElement = document.createElement('div');
            timeElement.className = 'message-time';
            timeElement.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            
            messageHeader.appendChild(senderElement);
            messageHeader.appendChild(timeElement);
            
            const contentElement = document.createElement('div');
            contentElement.className = 'message-content';
            contentElement.textContent = content;
            
            messageDiv.appendChild(messageHeader);
            messageDiv.appendChild(contentElement);
            
            messageContainer.appendChild(messageDiv);
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }
        
        // Highlight a chat tab with a badge
        function highlightChatTab(tab) {
            // Show indicator on tab
            const badge = document.getElementById(`${tab}ChatBadge`);
            badge.style.display = 'block';
            
            // Show indicator on main chat button
            chatBadgeEl.style.opacity = '1';
        }
        
        // Occasionally send messages from virtual players
        function simulateChat() {
            if (Math.random() < 0.3 && userSession.loggedIn) { // 30% chance each interval, only if logged in
                const player = virtualPlayers[Math.floor(Math.random() * (virtualPlayers.length - 2))]; // Don't use system accounts
                const message = virtualMessages[Math.floor(Math.random() * virtualMessages.length)];
                
                addMessage('global', player.name, message, false);
                
                if (!chatContainerEl.classList.contains('open')) {
                    highlightChatTab('global');
                }
            }
        }
        
        // Simulate chat messages every 2-5 minutes
        setInterval(simulateChat, 120000 + Math.random() * 180000);
        
        // Add initial AI chat greeting
        setTimeout(() => {
            addMessage('ai', 'Eco AI', 'Hello! I\'m your sustainability assistant. You can ask me about carbon footprints of different foods, sustainable lifestyle tips, or ways to reduce your environmental impact. How can I help you today?', false);
        }, 1000);
        
        // Initialize the game
        function initGame() {
            initCylinders();
            updateBalance();
            
            // Hide loading screen after a short delay
            setTimeout(() => {
                document.getElementById('loadingScreen').style.opacity = '0';
                setTimeout(() => {
                    document.getElementById('loadingScreen').style.display = 'none';
                    
                    // Show login screen
                    document.getElementById('loginScreen').classList.remove('hidden');
                }, 500);
            }, 1500);
        }
        
        // Initialize the game when the page loads
        window.addEventListener('load', initGame);
    </script>
</body>
</html>
